#+TITLE: Emacs Configuration
#+AUTHOR: Oscar Najera

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "najera.oscar@gmail.com"
        user-full-name    "Óscar Nájera")
#+END_SRC

* Editor
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("~/.emacs.d/backups")))
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Style
#+BEGIN_SRC emacs-lisp
  (load-theme 'misterioso t)
  (use-package powerline-evil
  :config
  (powerline-default-theme))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package relative-line-numbers
:config
(global-relative-line-numbers-mode)
(setq relative-line-numbers-motion-function 'forward-visible-line))
#+END_SRC

** Evil-mode
#+BEGIN_SRC emacs-lisp
(unless (fboundp 'evil-leader-mode)
(package-install 'evil-leader))
(global-evil-leader-mode)
(setq evil-search-module 'evil-search)
(require 'evil)
(evil-mode 1)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
    "x" 'helm-M-x
    "e" 'helm-find-files
    "p" 'helm-projectile
    "t" 'magit-status
    "s" 'eshell
    "w" 'save-buffer
    "q" 'kill-buffer-and-window
    "oa" 'org-agenda
    "oc" 'org-capture
    "r" 'ace-jump-char-mode
    "c" 'ace-jump-word-mode
    "g" 'helm-mini)

;;(global-set-key [escape] 'keyboard-quit)
(global-set-key [escape] 'helm-keyboard-quit)


(use-package key-chord
:init
    (setq key-chord-two-keys-delay 0.05)
    (key-chord-define evil-insert-state-map "tn" 'evil-normal-state)
:config
    (key-chord-mode 1))

(use-package ace-jump-mode
:ensure t )
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "r" nil) ;; block replace
(define-key evil-motion-state-map "r" 'evil-backward-char) ;; back
(define-key evil-insert-state-map "\C-l" 'evil-delete-backward-char)
(define-key evil-insert-state-map "\C-r" 'evil-delete-backward-word)

(define-key evil-motion-state-map "n" 'evil-next-line) ;; next line
(define-key evil-motion-state-map "l" 'evil-search-next) ;; next look up
(define-key evil-motion-state-map "L" 'evil-search-previous)
(define-key evil-motion-state-map "t" 'evil-previous-line) ;; top back up
(define-key evil-normal-state-map "T" 'evil-join) ;; line together

(define-key evil-normal-state-map "s" nil) ;; remove substitute
(define-key evil-motion-state-map "s" 'evil-forward-char)  ;; moves right

(define-key evil-normal-state-map "h" 'evil-replace)
(define-key evil-visual-state-map "h" 'evil-replace) ;; because it seems to respect old motion
(define-key evil-motion-state-map "j" 'evil-find-char-to)
(define-key evil-motion-state-map "J" 'evil-find-char-to-backward)
(define-key evil-normal-state-map "k" 'redo)
(define-key evil-motion-state-map "k" nil) ;; to block old motion

;; end and begining of lines
(define-key evil-motion-state-map "-" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)

(define-key evil-normal-state-map (kbd "C-r") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-n") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-t") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-s") 'evil-window-right)

;; dired
;; modify dired keys
(progn
(require 'dired )
(define-key dired-mode-map "t" 'dired-previous-line)
(define-key dired-mode-map "p" 'dired-toggle-marks)
)
#+END_SRC
** Add-ons
#+BEGIN_SRC emacs-lisp
(use-package ssh
:ensure t)
#+END_SRC
* Orgmode
#+BEGIN_SRC emacs-lisp
  (use-package org
  :bind (("\C-cl" . org-store-link)
         ("\C-ca" . org-agenda)
         ("\C-cc" . org-capture))
  :init
  (setq org-agenda-start-on-weekday 0)
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  (setq org-directory "~/Dropbox/org"
      org-mobile-directory "~/Dropbox/MobileOrg"
      org-mobile-inbox-for-pull "~/Dropbox/org/mobilecaptures.org")

  (setq org-agenda-files (list "~/Dropbox/org/schedule.org"
                               "~/Dropbox/org/journal.org"
                               "~/Dropbox/org/todo.org")))

  (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                  ("~/Dropbox/org/journal.org" :maxlevel . 3)
                                  ("~/Dropbox/org/todo.org" :maxlevel . 2))))

  (setq org-refile-use-outline-path nil)

  (evil-leader/set-key-for-mode 'org-mode
      "or"  'outline-previous-visible-heading
      "on"  'outline-next-visible-heading
      "oo" 'org-insert-heading
      "os" 'org-sort-list
      "ot" 'org-todo)

#+END_SRC
** Latex
This is to render latex formulas in the org buffer live after
editing. Extracted from [[http://kitchingroup.cheme.cmu.edu/blog/2015/10/09/Automatic-latex-image-toggling-when-cursor-is-on-a-fragment/][Automatic latex image toggling when cursor is
on a fragment]]

#+BEGIN_SRC emacs-lisp
;; Previewing latex fragments in org mode
(setq org-latex-create-formula-image-program 'imagemagick) ;; Recommended to use imagemagick

(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun org-latex-fragment-toggle ()
  "Toggle a latex fragment image "
  (and (eq 'org-mode major-mode)
       (let* ((el (org-element-context))
	      (el-type (car el)))
	 (cond
	  ;; were on a fragment and now on a new fragment
	  ((and
	    ;; fragment we were on
	    org-latex-fragment-last
	    ;; and are on a fragment now
	    (or
	     (eq 'latex-fragment el-type)
	     (eq 'latex-environment el-type))
	    ;; but not on the last one this is a little tricky. as you edit the
	    ;; fragment, it is not equal to the last one. We use the begin
	    ;; property which is less likely to change for the comparison.
	    (not (= (org-element-property :begin el)
		    (org-element-property :begin org-latex-fragment-last))))
	   ;; go back to last one and put image back
	   (save-excursion
	     (goto-char (org-element-property :begin org-latex-fragment-last))
	     (org-preview-latex-fragment))
	   ;; now remove current image
           (goto-char (org-element-property :begin el))
	   (let ((ov (loop for ov in org-latex-fragment-image-overlays
			   if
			   (and
			    (<= (overlay-start ov) (point))
			    (>= (overlay-end ov) (point)))
			   return ov)))
	     (when ov
	       (delete-overlay ov)))
	   ;; and save new fragment
	   (setq org-latex-fragment-last el))

	  ;; were on a fragment and now are not on a fragment
	  ((and
	    ;; not on a fragment now
	    (not (or
		  (eq 'latex-fragment el-type)
		  (eq 'latex-environment el-type)))
	    ;; but we were on one
	    org-latex-fragment-last)
	   ;; put image back on
	   (save-excursion
	     (goto-char (org-element-property :begin org-latex-fragment-last))
	     (org-preview-latex-fragment))
	   ;; unset last fragment
	   (setq org-latex-fragment-last nil))

	  ;; were not on a fragment, and now are
	  ((and
	    ;; we were not one one
	    (not org-latex-fragment-last)
	    ;; but now we are
	    (or
	     (eq 'latex-fragment el-type)
	     (eq 'latex-environment el-type)))
	   (goto-char (org-element-property :begin el))
           ;; remove image
	   (let ((ov (loop for ov in org-latex-fragment-image-overlays
			   if
			   (and
			    (<= (overlay-start ov) (point))
			    (>= (overlay-end ov) (point)))
			   return ov)))
	     (when ov
	       (delete-overlay ov)))
	   (setq org-latex-fragment-last el))))))


(add-hook 'post-command-hook 'org-latex-fragment-toggle)
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-capture-templates
      '(("t" "Task" entry (file+headline "~/Dropbox/org/notes.org" "Tasks")
          "* TODO %?\n  %U\n  %i\n  %a" :clock-in t :clock-resume t)
        ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("l" "Lab Journal Entry" entry (file+datetree "~/Dropbox/org/PHD_Journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("e" "Event" entry (file "~/Dropbox/org/schedule.org")
          "* %?\n  %^T\n  %i\n  %a" :clock-in t :clock-resume t)))
#+END_SRC
** Babel
*** IPython
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t);; sintax highligting of codeblock in org
(use-package ob-ipython
  :ensure t)
(setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC
*** RevealJS
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:config
(setq org-reveal-root "file:///home/oscar/dev/reveal.js"))
#+END_SRC

** Key Bindings
*** normal & insert state shortcuts.
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metaleft
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metadown
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetaleft
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetadown
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:init
(autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
:ensure auctex
:config
(setq LaTeX-command "latex -shell-escape"))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
  :bind (("M-x" . helm-M-x)
         ("C-x g" . helm-mini))
  :config
  (require 'helm-config)
  (helm-mode 1))

  (use-package helm-projectile
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t)
#+END_SRC

** Citations
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :config
    (setq helm-bibtex-bibliography '("~/Dropbox/org/papers.bib"))
    (setq helm-bibtex-library-path '("~/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/"
                                     "~/Documents/Mendeley Desktop/"))
    (setq helm-bibtex-pdf-field "File")
    (setq helm-bibtex-notes-path "~/Dropbox/org/WorkPhys/literature_notes.org"))
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:init
(ac-config-default)
(setq ac-auto-show-menu 0.2))
(use-package yasnippet
:config (yas-global-mode t))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :config
  (define-key magit-mode-map "t" 'magit-section-backward)
  (define-key magit-mode-map "\M-t" 'magit-section-backward-sibling)
  (define-key magit-mode-map "p" 'magit-tag-popup)
  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'git-commit-mode-hook 'evil-insert-state))
  (use-package magit-gh-pulls
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC
* Coding
** Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  :init
  (define-key evil-motion-state-map "gL" 'flycheck-previous-error)
  (define-key evil-motion-state-map "gl" 'flycheck-next-error)
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+END_SRC
** Python
 #+BEGIN_SRC emacs-lisp
 (setq python-shell-interpreter "ipython")
 (use-package jedi
 :config
 (add-hook 'python-mode-hook 'flyspell-prog-mode)
 (add-hook 'python-mode-hook 'jedi:setup)
 (setq jedi:complete-on-dot t))

 (use-package cython-mode
 :ensure t)
 (use-package yaml-mode
 :ensure t)
 #+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
   :ensure t)
#+END_SRC
* Email
** BBDB
#+BEGIN_SRC emacs-lisp
(setq bbdb-file "~/Dropbox/bbdb"
	bbdb-offer-save 'auto
	bbdb-notice-auto-save-file t
	bbdb-expand-mail-aliases t
	bbdb-canonicalize-redundant-nets-p t
	bbdb-always-add-addresses t
	bbdb-complete-name-allow-cycling t
)
(require 'bbdb)
(bbdb-initialize 'gnus 'message)
(bbdb-insinuate-message)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
#+END_SRC
** Composer
#+BEGIN_SRC emacs-lisp
;; linebreak in message editing
(defun my-message-mode-setup ()
(setq fill-column 72)
(turn-on-auto-fill))

(add-hook 'message-mode-hook 'my-message-mode-setup)
(add-hook 'message-mode-hook 'flyspell-mode)
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
(add-hook 'message-mode-hook 'turn-on-orgtbl)
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
(use-package twittering-mode
:config
(setq twittering-use-master-password t)
(setq twittering-icon-mode t)
(setq twittering-use-icon-storage t))
#+END_SRC
** Send
#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
        smtpmail-smtp-server "smtp.googlemail.com"
        smtpmail-smtp-service 587)
#+END_SRC

* Test/temp
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook 'evil-emacs-state))
#+END_SRC
