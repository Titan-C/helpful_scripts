#+TITLE: Emacs Configuration
#+AUTHOR: Óscar Nájera

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "hello@oscarnajera.com"
        user-full-name    "Óscar Nájera")
#+END_SRC

* Editor
#+BEGIN_SRC emacs-lisp
  ;;http://emacs-fu.blogspot.fr/2011/01/setting-frame-title.html
  (setq frame-title-format
    '("" invocation-name ": "(:eval (if (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                 "%b"))))

  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq vc-follow-symlinks t)
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (setq-default fill-column 75)
  (add-hook 'text-mode-hook 'visual-line-mode) ;; word-wrap
  (add-hook 'text-mode-hook 'flyspell-mode) ;; spell-check
  (setq safe-local-variable-values '((ispell-dictionary . "spanish")))
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :config
    ;; this make ediff open the comand buffer in the same frame is better when using
    ;; the tiling WM awesome
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  )
#+END_SRC
** Style
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme)

  (use-package material-theme
    :config
    (load-theme 'material t))

  ;; font size
  (set-face-attribute 'default nil :font "DejaVuSansMono Nerd Font-11")

  (use-package spaceline-config
  :ensure spaceline
  :config
  (spaceline-spacemacs-theme)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
        powerline-default-separator 'wave))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :config
    (nlinum-relative-setup-evil)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode))
#+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 150)

  (use-package ace-window
    :bind (("M-p" . ace-window))
    :config (setq aw-keys '(?a ?o ?e ?d ?r ?t ?n ?s)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'windmove)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)

  (use-package hydra
    :init
    (defhydra hydra-window ()
       "
    Movement^^        ^Split^         ^Switch^      ^Resize^
    ----------------------------------------------------------------
    _n_ ←         _d_ vertical      _g_ buffer      _N_ ←
    _r_ ↓         _q_ horizontal    _f_ind files    _R_ ↓
    _t_ ↑         _._ undo          _c_ ace 1       _T_ ↑
    _s_ →         _:_ reset         _h_ swap        _S_ →
    _F_ollow        _D_lt Other     _p_roject files _m_aximize
    _SPC_ cancel    onl_y_ this     _x_ delete
    "
       ("r" windmove-down )
       ("t" windmove-up )
       ("n" windmove-left )
       ("s" windmove-right )
       ("N" hydra-move-splitter-left)
       ("R" hydra-move-splitter-down)
       ("T" hydra-move-splitter-up)
       ("S" hydra-move-splitter-right)
       ("g" helm-mini)
       ("p" helm-projectile)
       ("f" helm-find-files)
       ("F" follow-mode)
       ("c" (lambda ()
              (interactive)
              (ace-window 1)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body))
           )
       ("d" (lambda ()
              (interactive)
              (split-window-right)
              (windmove-right))
           )
       ("q" (lambda ()
              (interactive)
              (split-window-below)
              (windmove-down))
           )
       ("h" (lambda ()
              (interactive)
              (ace-window 4)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body)))
       ("x" delete-window)
       ("D" (lambda ()
              (interactive)
              (ace-window 16)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body))
           )
       ("y" delete-other-windows)
       ("m" ace-maximize-window)
       ("." (progn
              (winner-undo)
              (setq this-command 'winner-undo))
       )
       (":" winner-redo)
       ("SPC" nil)))
#+END_SRC

** Evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
        "x" 'helm-M-x
        "f" 'helm-find-files
        "p" 'helm-projectile
        "t" 'magit-status
        "m" 'notmuch
        "s" 'eshell
        "q" 'kill-this-buffer
        "Q" 'kill-buffer-and-window
        "oa" 'org-agenda
        "r" 'avy-goto-char
        "c" 'avy-goto-word-1
        "g" 'helm-mini)
  )

  ;;(global-set-key [escape] 'keyboard-quit)
  (global-set-key [escape] 'helm-keyboard-quit)


  (use-package key-chord
    :init
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define-global "ww" (lambda () (interactive) (save-buffer)
                                               (evil-normal-state)))
    :config
      (key-chord-mode 1))

  (use-package avy
    :ensure t )
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "r" nil) ;; block replace
(define-key evil-motion-state-map "n" 'evil-backward-char) ;; back
(define-key evil-insert-state-map "\C-l" 'evil-delete-backward-char)
(define-key evil-insert-state-map "\C-r" 'evil-delete-backward-word)

(define-key evil-motion-state-map "r" 'evil-next-line) ;; next line
(define-key evil-motion-state-map "l" 'evil-search-next) ;; next look up
(define-key evil-motion-state-map "L" 'evil-search-previous)
(define-key evil-motion-state-map "t" 'evil-previous-line) ;; top back up
(define-key evil-normal-state-map "T" 'evil-join) ;; line together

(define-key evil-normal-state-map "s" nil) ;; remove substitute
(define-key evil-motion-state-map "s" 'evil-forward-char)  ;; moves right

(define-key evil-normal-state-map "h" 'evil-replace)
(define-key evil-visual-state-map "h" 'evil-replace) ;; because it seems to respect old motion
(define-key evil-motion-state-map "j" 'evil-find-char-to)
(define-key evil-motion-state-map "J" 'evil-find-char-to-backward)
(define-key evil-normal-state-map "k" 'redo)
(define-key evil-motion-state-map "k" nil) ;; to block old motion

;; end and begining of lines
(define-key evil-motion-state-map "-" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)

;; scrolling
(define-key evil-motion-state-map (kbd "C-i") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-r") nil)
(define-key evil-motion-state-map (kbd "C-r") 'evil-scroll-line-down)
(define-key evil-normal-state-map (kbd "C-t") nil)
(define-key evil-motion-state-map (kbd "C-t") 'evil-scroll-line-up)
(define-key evil-normal-state-map (kbd "C-w") 'hydra-window/body)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun my-save-if-bufferfilename ()
      (if (buffer-file-name)
          (progn
          (save-buffer)
          )
      (message "no file is associated to this buffer: do nothing")
      )
  )
  (add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
;; modify dired keys
(progn
(require 'dired )
(evil-set-initial-state 'dired-mode 'emacs)
(define-key dired-mode-map "t" 'dired-previous-line)
(define-key dired-mode-map "r" 'dired-next-line)
(define-key dired-mode-map "p" 'dired-toggle-marks)
(setq-default dired-listing-switches "-alh")
)
#+END_SRC
** Spelling
About using hunspell and langtool from https://joelkuiper.eu/spellcheck_emacs
#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary "~/dev/helpful_scripts/emacs.d/personal_dict")
  (setq-default ispell-program-name (executable-find "hunspell"))
  ;;(setq ispell-really-hunspell t)

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXPORT latex" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("[^\\]\\$" . "[^\\]\\$"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :config
    (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"
          langtool-mother-tongue "es"
          langtool-default-language "en-US"
          langtool-disabled-rules '("WHITESPACE_RULE")))
#+END_SRC
** Add-ons
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
  (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
** Parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
  (use-package smartparens
    :diminish smartparens-mode
    :bind (:map smartparens-mode-map
          ("C-)" . sp-forward-slurp-sexp)
          ("C-(" . sp-backward-slurp-sexp)
          ("C-M-)" . sp-forward-barf-sexp)
          ("C-M-(" . sp-backward-barf-sexp))
    :init
      (require 'smartparens-config)
      (smartparens-global-mode t))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :bind (("M-x" . helm-M-x)
             ("C-x g" . helm-mini))
      :config
      (require 'helm-config)
      (define-key helm-map (kbd "C-p") 'helm-toggle-resplit-and-swap-windows)

      (evil-leader/set-key
          "hs" 'helm-semantic-or-imenu
          "hd" 'helm-show-kill-ring
          "hl" 'helm-locate)

      (helm-mode 1))

  (use-package helm-ag
      :ensure t
      :config
      (evil-leader/set-key "ho" 'helm-do-ag-this-file)
  )

  (use-package helm-projectile
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      (evil-leader/set-key "ha" 'helm-projectile-ag)
  )

  (use-package hydra
      ;; Hydra to enter in vim normal state like
      ;; for speed key bindings
      :init
      (defhydra helm-vim-normal ()
          ("?" helm-help "help")
          ("<escape>" keyboard-escape-quit "exit")
          ("q" keyboard-escape-quit "exit")
          ("<SPC>" helm-toggle-visible-mark "mark")
          ("m" helm-toggle-all-marks "(un)mark all")
          ("l" helm-execute-persistent-action "persistent")
          ("g" helm-beginning-of-buffer "top")
          ("G" helm-end-of-buffer "bottom")
          ("c" helm-find-files-up-one-level "Dir up")
          ("f" helm-find-files-down-last-level "Dir down")
          ("r" helm-next-line "down")
          ("t" helm-previous-line "up")
          ("n" helm-previous-source "prev src")
          ("s" helm-next-source "next src")
          ("w" helm-toggle-resplit-and-swap-windows "swap windows")
          ("i" nil "cancel"))

      (define-key helm-map (kbd "<escape>") 'helm-vim-normal/body)

      ;;(key-chord-define helm-map "jk" 'helm-like-unite/body)
  )
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-/" 'hippie-expand)

  (use-package company
    :bind (:map company-active-map
              ("C-r" . company-select-next)
              ("C-t" . company-select-previous)
           :map company-search-map
              ("C-r" . company-select-next)
              ("C-t" . company-select-previous))
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0.2
            company-selection-wrap-around t)
      )



  (use-package yasnippet
  :config (yas-global-mode t))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (setq swiper-action-recenter t)
    (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
    :bind (("C-s" . swiper)
           :map evil-normal-state-map
                ("/" . swiper)
                ("?" . swiper)))

  (use-package ivy
    :bind (:map ivy-minibuffer-map
                ("C-r" . ivy-next-line)
                ("C-t" . ivy-previous-line)
                ("C-n" . ivy-reverse-i-search)))
#+END_SRC
* shell
** Zsh
Zsh is great and it's completion too. Use a compatible term and
disable other completions. But it looks a disaster inside emacs
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :config
  (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))
  (setq company-global-modes '(not term-mode)))
#+END_SRC

** Eshell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "~/dev/helpful_scripts")
  (add-to-list 'exec-path "~/.cargo/bin")
  (use-package eshell-git-prompt
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+END_SRC
* Orgmode
** Main Behavior
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("\C-ca" . org-agenda)
           ("\C-cc" . org-capture)
           ("\C-cl" . org-store-link))
    :init
    (add-hook 'org-agenda-mode-hook (lambda ()
     (define-key org-agenda-mode-map "T" 'org-agenda-previous-line)
     (define-key org-agenda-mode-map "t" 'org-agenda-previous-item)
     (define-key org-agenda-mode-map "R" 'org-agenda-next-line)
     (define-key org-agenda-mode-map "r" 'org-agenda-next-item)
     (define-key org-agenda-mode-map "n" 'org-agenda-redo)
     (define-key org-agenda-mode-map "N" 'org-agenda-clockreport-mode)
     (define-key org-agenda-mode-map "p" 'org-agenda-todo)
     (define-key org-agenda-mode-map "P" 'org-agenda-show-tags)))

    ;; Work directories
    (setq org-directory "~/Dropbox/org")

    ;; Refile
    (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                  ("~/Dropbox/org/journal.org" :maxlevel . 3)
                                  ("~/Dropbox/org/todo.org" :maxlevel . 2))))
    (setq org-refile-use-outline-path t)
    (setq org-outline-path-complete-in-steps nil)

    ;;imenu
    (setq org-imenu-depth 4)

    ;; Agenda files
    (setq org-agenda-files (list "~/Dropbox/org/schedule.org"
                                 "~/dissertation/thesis.org"
                                "~/Dropbox/org/gcal.org"
                                "~/Dropbox/org/journal.org"
                                "~/Dropbox/org/todo.org"))
    (setq org-agenda-start-on-weekday 0)
    (setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 4)))

    ;; Text editing
    (setq org-hide-emphasis-markers t)
    ;;; emphasis markers can span upto 3 lines
    (setf (nth 4 org-emphasis-regexp-components) 3)
    (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'flyspell-mode))

  ;; leader shortcuts
  (evil-leader/set-key-for-mode 'org-mode
      "ot"  'outline-previous-visible-heading
      "or"  'outline-next-visible-heading
      "oo"  'org-insert-heading
      "os"  'org-sort-list
      "oci" 'org-clock-in
      "oco" 'org-clock-out
      "ocd" 'org-clock-display
      "ocr" 'org-clock-goto
      "oe" 'org-todo)

  ;; Launch day agenda
  ;;(org-agenda-list 1)
  ;;(setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))

#+END_SRC

** Alerts
This is to set the reminders of calendar events.
Using appt is quite fine. I get a remainder just above the minibuffer
There is no loud sound or anything disturbing, just the appearance of
this new window.
#+BEGIN_SRC emacs-lisp
  (setq
    appt-display-mode-line t     ;; show in the modeline
    appt-display-format 'window) ;; use our func
  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...

  ;; update appt each time agenda opened
  (add-hook 'org-agenda-finalize-hook 'org-agenda-to-appt)
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :config
    (setq org-gcal-client-id (car (auth-source-user-and-password "googlecalapi"))
          org-gcal-client-secret (cadr (auth-source-user-and-password "googlecalapi"))
          org-gcal-file-alist '(("najera.oscar@gmail.com" . "~/Dropbox/org/gcal.org")))
  )

  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
  ;; code syntax highlighting. See section 12
  ;; http://orgmode.org/worg/org-tutorials/org-latex-export.html
  ;;(add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")))
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-latex-pdf-process '("latexmk -g -pdf -outdir=%o %f"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package org-edit-latex
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-edit-latex-mode)
    (plist-put org-format-latex-options :scale 1.5)
    (setq org-preview-latex-default-process 'imagemagick)
    (key-chord-define org-src-mode-map ".." 'org-edit-latex-preview-at-point)
    (key-chord-define org-mode-map ".." 'org-toggle-latex-fragment))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (use-package company-math
      :ensure company-math
      :config
      (defun my-latex-mode-setup ()
      (setq-local company-backends
                  (append '((company-math-symbols-latex company-latex-commands))
                          company-backends)))

       (add-hook 'org-mode-hook 'my-latex-mode-setup)
       (add-to-list 'company-math-allow-latex-symbols-in-faces 'org-latex-and-related)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; ** <<APS journals>>
  (require 'ox-latex)
  (add-to-list 'org-latex-classes '("revtex4-1"
                                    "\\documentclass{revtex4-1}
  [PACKAGES]
  [EXTRA]"
                                     ("\\section{%s}" . "\\section*{%s}")
                                     ("\\subsection{%s}" . "\\subsection*{%s}")
                                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes '("letter"
                      "\\documentclass{letter}
       \[DEFAULT-PACKAGES]
       \[PACKAGES]
       \[EXTRA]"))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-capture-templates
      '(("t" "Task" entry (file "~/Dropbox/org/todo.org")
          "* TODO %?\n  %U\n  %i\n  %a" :clock-in t :clock-resume t)
        ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("l" "Lab Journal Entry" entry (file+datetree "~/Dropbox/org/PHD_Journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("e" "Event" entry (file "~/Dropbox/org/schedule.org")
          "* %?\n  %^T\n  %i\n  %a" :clock-in t :clock-resume t)))
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (shell . t)
     (dot . t)
     (python . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t);; sintax highligting of codeblock in org
  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
  ;;; display/update images in the buffer after I evaluate
  (setq org-image-actual-width '(500))
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (setq org-babel-python-command "ipython --simple-prompt --pprint")
  ;; use %cpaste to paste code into ipython in org mode
  ;; from http://emacs.stackexchange.com/questions/3859/working-setup-for-ipython-in-babel
  (defadvice org-babel-python-evaluate-session
      (around org-python-use-cpaste
              (session body &optional result-type result-params) activate)
      "add a %cpaste and '--' to the body, so that ipython does the right thing."
      (setq body (concat "%cpaste -q \n" body "\n--"))
      ad-do-it
  )

  (setq org-babel-default-header-args:python
        '((:session . "Python")
          (:tangle . "yes")
          (:eval . "never-export")
          (:exports . "results")))
#+END_SRC
*** RevealJS
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:init
(setq org-reveal-root "file:///home/oscar/dev/reveal.js"))
#+END_SRC
** Bibliography references
#+BEGIN_SRC emacs-lisp
  (use-package bibtex
    :config
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-titlewords 5
          bibtex-autokey-titleword-length nil))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :init
    (evil-leader/set-key
      "hb" 'helm-bibtex)
    :config
    (setq bibtex-completion-bibliography '("~/Dropbox/biblio/papers.bib"
                                           "~/Dropbox/biblio/zotero.bib"
                                           "~/Dropbox/biblio/arxiv.bib"
                                           "~/Dropbox/biblio/library.bib"
                                           "~/Dropbox/biblio/slides_talks.bib"))
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-library-path "~/Dropbox/bibtex-pdf/")
    (setq bibtex-completion-notes-path "~/Dropbox/org/WorkPhys/literature_notes.org"))

    (defun bibtex-completion-open-notes-and-pdf (keys)
         (bibtex-completion-open-pdf keys)
         (bibtex-completion-edit-notes keys))

    (helm-bibtex-helmify-action bibtex-completion-open-notes-and-pdf helm-bibtex-open-notes-and-pdf)
    ;(helm-delete-action-from-source "Edit notes with PDF" helm-source-bibtex)
    (helm-add-action-to-source "Edit notes with PDF" 'helm-bibtex-open-notes-and-pdf helm-source-bibtex 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
   :init
   (key-chord-define bibtex-mode-map "jj" 'org-ref-bibtex-hydra/body)
   :config
   (setq org-ref-show-broken-links nil)
   (setq org-ref-bibliography-notes bibtex-completion-notes-path)
   (setq org-ref-default-bibliography bibtex-completion-bibliography)
   (setq org-ref-pdf-directory bibtex-completion-library-path)
   (require 'org-ref-pdf)
   (require 'org-ref-url-utils)
   (require 'org-ref-arxiv)
   (require 'doi-utils)
   (setq doi-utils-download-pdf nil
         doi-utils-make-notes nil)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun org-ref-bibtex-assoc-pdf-sup-with-entry (&optional prefix)
    "Prompt for supplementary pdf associated with entry at point and
  rename it.  Check whether a pdf already exists in
  `org-ref-pdf-directory' with the name '[bibtexkey]_sup.pdf'. If the
  file does not exist, rename it to '[bibtexkey]_sup.pdf' using
  `org-ref-bibtex-assoc-pdf-with-entry-move-function' and place it in
  `org-ref-pdf-directory'. Finally set the file field in the bibtex to
  include main pdf and supplementary pdf file locations"
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((file (read-file-name "Select file associated with entry: "))
	     (bibtex-expand-strings t)
             (entry (bibtex-parse-entry t))
             (key (reftex-get-bib-field "=key=" entry))
             (mainpdf (concat org-ref-pdf-directory key ".pdf"))
             (suppdf (concat org-ref-pdf-directory key "_sup.pdf"))
             (key-files (concat ":" mainpdf ":PDF;:" suppdf ":PDF"))
	     (file-move-func (org-ref-bibtex-get-file-move-func prefix)))
        (if (file-exists-p suppdf)
	    (message (format "A file named %s already exists" pdf))
	  (progn
	    (funcall file-move-func file suppdf)
            (bibtex-set-field "file" key-files)
	    (message (format "Created file %s" suppdf)))))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defhydra helm-org-ref-insert-link ()
    ("c" org-ref-helm-insert-cite-link "cite article")
    ("r" org-ref-helm-insert-ref-link "reference link")
    ("l" org-ref-helm-insert-label-link "create label"))

  (key-chord-define org-mode-map "jj" 'helm-org-ref-insert-link/body)
#+END_SRC
** Key Bindings
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("e" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist '("p" "#+BEGIN_SRC python\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist '("C" "#+CAPTION: ?"))
#+END_SRC
*** normal & insert state shortcuts.
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metadown
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metaleft
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetadown
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetaleft
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook (lambda () (abbrev-mode 1)))
;; when writting org-mode latex make this count as words to block
;; expansion
(modify-syntax-entry ?_ "w" org-mode-syntax-table)
(modify-syntax-entry ?^ "w" org-mode-syntax-table)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:mode "\\.md//'"
:init
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
:ensure auctex
:init
(setq LaTeX-command "latex -shell-escape"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :init
  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
  :config
  (setq magit-diff-refine-hunk t)
  (setq magit-repository-directories '("~/dev"))
  (define-key magit-mode-map "t" 'magit-section-backward)
  (define-key magit-mode-map "\M-t" 'magit-section-backward-sibling)
  (define-key magit-mode-map "r" 'magit-section-forward)
  (define-key magit-mode-map "\M-r" 'magit-section-forward-sibling)

  (define-key magit-mode-map "p" 'magit-tag-popup)
  (define-key magit-mode-map "n" 'magit-rebase-popup))

  (use-package magit-gh-pulls
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC
* Coding
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  :init
  (define-key evil-motion-state-map "gL" 'flycheck-previous-error)
  (define-key evil-motion-state-map "gl" 'flycheck-next-error)
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
      :init
          (add-hook 'python-mode-hook 'flyspell-prog-mode)
          (add-hook 'python-mode-hook 'elpy-mode)
      :config
          (elpy-enable)
          (pyvenv-activate "~/.virtualenvs/dev3/")
          (setq elpy-rpc-backend "jedi")
          (remove-hook 'elpy-modules 'elpy-module-flymake)
          (elpy-use-ipython)
          (setq python-shell-interpreter-args "--simple-prompt --pprint")
          (setq python-shell-completion-native-enable nil)
          (evil-define-key 'motion python-mode-map "gd" 'elpy-goto-definition)
          (setq elpy-test-runner 'elpy-test-pytest-runner)
   )

  (use-package py-autopep8
      :config
          (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
  (use-package sphinx-doc
    :diminish sphinx-doc-mode)

  (use-package cython-mode
      :mode (("\\.pyx" . cython-mode)))

  (use-package yaml-mode :ensure t)
#+END_SRC
*** IPython Notebook
#+BEGIN_SRC emacs-lisp
  (use-package ein
      :ensure t
      :init (evil-leader/set-key "ipn" 'ein:notebooklist-open)
      :config
      (require 'ein-multilang)
      (setq ein:complete-on-dot t
            ein:use-auto-complete t)
      (mapc (lambda (state)
          (evil-define-key state ein:notebook-multilang-mode-map
              (kbd "M-y") 'ein:worksheet-copy-cell
              (kbd "M-p") 'ein:worksheet-yank-cell
              (kbd "M-d") 'ein:worksheet-kill-cell
              (kbd "M-o") 'ein:worksheet-insert-cell-below
              (kbd "M-O") 'ein:worksheet-insert-cell-above

              (kbd "M-r") 'ein:worksheet-goto-next-input
              (kbd "M-t") 'ein:worksheet-goto-prev-input
              (kbd "M-R") 'ein:worksheet-move-cell-down
              (kbd "M-T") 'ein:worksheet-move-cell-up

              (kbd "M-h") 'ein:worksheet-toggle-output
              )) '(normal insert))
  )
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
   :ensure t)
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode (("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    (rust-enable-format-on-save))

  (use-package cargo
    :config
    (setq cargo-process--custom-path-to-bin "~/.cargo/bin/")
    (add-hook 'rust-mode-hook 'cargo-minor-mode))

  (use-package flycheck-rust
    :ensure t
    :mode (("\\.rs\\'" . rust-mode))
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
    :config
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'racer-mode-hook #'company-mode))
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider)
  (use-package flycheck-clojure
    :config
    (flycheck-clojure-setup))
#+END_SRC
* Email
** Notmuch client
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :bind (:map notmuch-hello-mode-map
          ("l" . notmuch-jump-search)
          ("/" . notmuch-tree)
          :map notmuch-search-mode-map
          ("r" . notmuch-search-next-thread)
          ("N" . notmuch-search-reply-to-thread)
          ("t" . notmuch-search-previous-thread)
          ("f" . notmuch-search-filter-by-tag)
          ("/" . notmuch-tree)
          :map notmuch-tree-mode-map
          ("r" . notmuch-tree-next-matching-message)
          ("t" . notmuch-tree-prev-matching-message)
          ("R" . notmuch-tree-next-message)
          ("T" . notmuch-tree-prev-message)
          :map notmuch-show-mode-map
          ("N" . notmuch-show-reply)
          ("n" . notmuch-show-reply-sender)
          ("r" . notmuch-show-next-message)
          ("t" . notmuch-show-previous-message)
          ("M-r" . notmuch-show-next-thread-show)
          ("M-t" . notmuch-show-previous-thread-show)
          )
    :config
      (define-key notmuch-tree-mode-map "n"
        (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
      (define-key notmuch-tree-mode-map "N"
        (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
      (setq notmuch-search-oldest-first nil)
      (evil-set-initial-state 'notmuch-tree-mode 'emacs)

      (define-key notmuch-show-mode-map "d"
         (lambda ()
            (interactive)
            (notmuch-show-tag-message
               (if (member "deleted" (notmuch-show-get-tags))
                  "-deleted" "+deleted"))))

      (define-key notmuch-search-mode-map "d"
         (lambda ()
         "delete message"
            (interactive)
            (notmuch-search-tag
               (if (member "deleted" (notmuch-search-get-tags))
                    '("-deleted")
                    '("+deleted" "-inbox" "-unread")))))

      (define-key notmuch-tree-mode-map "d"
         (lambda ()
         "delete message"
            (interactive)
            (notmuch-tree-tag
               (if (member "deleted" (notmuch-tree-get-tags))
                    '("-deleted")
                    '("+deleted" "-inbox" "-unread")))))

      (setq notmuch-saved-searches
          '((:name "inbox" :query "tag:inbox" :key "i")
            (:name "flagged" :query "tag:flagged" :key "f")
            (:name "unread" :query "tag:unread" :key "u")
            (:name "drafts" :query "tag:draft" :key "d")))

      (setq notmuch-show-all-tags-list t
            notmuch-hello-tag-list-make-query "tag:unread and not tag:killed")

      (setq notmuch-fcc-dirs '((".*@oscarnajera.com" . "hi_pers/Sent")
                               (".*@gmail.com" . "gmail/[Gmail]/.Sent Mail")
                               (".*@u-psud.fr" . "upsud/Sent")))

      (setq notmuch-crypto-process-mime t)
      (setq message-kill-buffer-on-exit t)


  (zenburn-with-color-variables
    (setq notmuch-search-line-faces `(("deleted" . (:strike-through t))
                                      ("flagged" 'notmuch-search-flagged-face)
                                      ("unread" . (:background ,zenburn-bg-1
                                                   :foreground ,zenburn-green)))))
  )
#+END_SRC
Load org-notmuch independently to open links from org files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'org-notmuch)
#+END_SRC
** BBDB
#+BEGIN_SRC emacs-lisp
  (use-package bbdb
  :init
  (setq bbdb-file "~/Dropbox/bbdb"
          bbdb-offer-save 'auto
          bbdb-notice-auto-save-file t
          bbdb-expand-mail-aliases t
          bbdb-canonicalize-redundant-nets-p t
          bbdb-always-add-addresses t
          bbdb-complete-name-allow-cycling t
  )
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  :config
  (bbdb-initialize 'gnus 'message)
  (bbdb-insinuate-message))
#+END_SRC
** Composer
#+BEGIN_SRC emacs-lisp
  ;; linebreak in message editing
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
  (use-package org-mime
    :defer t
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t)
    :config
    (add-hook 'twittering-edit-mode-hook (lambda () (ispell-minor-mode) (flyspell-mode)))

    :bind (:map twittering-mode-map
           ("r" . twittering-goto-next-status)
           ("t" . twittering-goto-previous-status)))
#+END_SRC
** Send
#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
  )

  (defconst smtp-from-server-alist
    '(("Oscar Najera <hello@oscarnajera.com>" . ("mail.najera.pw" 587 starttls))
      ("Oscar Najera <hi@oscarnajera.com>" . ("mail.najera.pw" 587 starttls))
      ("Oscar Najera <najera.oscar@gmail.com>" . ("smtp.googlemail.com" 587 starttls))
      ("Oscar Najera <oscar.najera-ocampo@u-psud.fr>" . ("smtps.u-psud.fr" 465 ssl))
      ))

  (defun set-smtp-server ()
    (let* ((smtp-conf (cdr (assoc (save-restriction
                                (message-narrow-to-headers)
                                (message-fetch-field "from"))
                                  smtp-from-server-alist)))
           (server (nth 0 smtp-conf))
           (port (nth 1 smtp-conf))
           (protocol (nth 2 smtp-conf)))
      (unless server (setq server "mail.najera.pw"
                           port 587))
      (setq smtpmail-smtp-server server
            smtpmail-smtp-service port
            smtpmail-stream-type protocol)
      (message "SMTP server changed to %s in port %s by %s" server port protocol)))
  (add-hook 'message-send-mail-hook 'set-smtp-server)
#+END_SRC
* RSS
#+BEGIN_SRC emacs-lisp
  ;; functions to support syncing .elfeed
  ;; makes sure elfeed reads index from disk before launching
  ;; http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/

  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (use-package elfeed
      :bind (:map elfeed-search-mode-map
              ("r" . next-line)
              ("t" . previous-line)
              ("n" . elfeed-search-untag-all-unread)
              ("q" . bjm/elfeed-save-db-and-bury)
             :map elfeed-show-mode-map
             ("r" . elfeed-show-next)
             ("t" . elfeed-show-prev)
             )
    :config
      (evil-set-initial-state 'elfeed-show-mode 'emacs)
      (evil-set-initial-state 'elfeed-search-mode 'emacs))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC
This allows to do an org capture from the elfeed entry so that I can
keep track of my reading todo list. Also keep track of [[https://github.com/skeeto/elfeed/pull/128][elfeed#128]] to
see this feature integrated.
#+BEGIN_SRC emacs-lisp
  ;; from https://github.com/skeeto/elfeed/issues/34#issuecomment-158824561
  (defun my-elfeed-store-link ()
    "Store a link to an elfeed search or entry buffer."
    (cond ((derived-mode-p 'elfeed-search-mode)
           (org-store-link-props
            :type "elfeed"
            :link (format "elfeed:%s" elfeed-search-filter)
            :description elfeed-search-filter))
          ((derived-mode-p 'elfeed-show-mode)
           (org-store-link-props
            :type "elfeed"
            :link (format "elfeed:%s#%s"
                          (car (elfeed-entry-id elfeed-show-entry))
                          (cdr (elfeed-entry-id elfeed-show-entry)))
            :description (elfeed-entry-title elfeed-show-entry)))))

  (defun my-elfeed-open (filter-or-id)
    "Jump to an elfeed entry or search, depending on what FILTER-OR-ID looks like."
    (message "filter-or-id: %s" filter-or-id)
    (if (string-match "\\([^#]+\\)#\\(.+\\)" filter-or-id)
        (elfeed-show-entry (elfeed-db-get-entry (cons (match-string 1 filter-or-id)
                                                      (match-string 2 filter-or-id))))
      (switch-to-buffer (elfeed-search-buffer))
      (unless (eq major-mode 'elfeed-search-mode)
        (elfeed-search-mode))
      (elfeed-search-set-filter filter-or-id)))

  (org-add-link-type "elfeed" #'my-elfeed-open)
  (add-hook 'org-store-link-functions #'my-elfeed-store-link)
#+END_SRC
* Pdf-Reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :mode (("\\.pdf$" . pdf-view-mode))
    :bind (:map pdf-view-mode-map
                ("r" . pdf-view-scroll-up-or-next-page)
                ("R" . pdf-view-next-page-command)
                ("t" . pdf-view-scroll-down-or-previous-page)
                ("T" . pdf-view-previous-page-command)
                ("C-s" . isearch-forward)
)
    :config
    (pdf-tools-install)
    (evil-set-initial-state 'pdf-view-mode 'emacs))

  (use-package org-pdfview
    :init
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open file))))
    (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . (lambda (file link) (org-pdfview-open file))))
    )
#+END_SRC
* Music
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :config
    (setq emms-source-file-default-directory "~/Music/")
    (emms-all)
    (emms-default-players)
    (add-to-list 'emms-info-functions 'emms-info-mpd)
    (add-to-list 'emms-player-list 'emms-player-mpd)
    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
    (add-to-list 'emms-info-functions 'emms-info-mp3info)
    (evil-set-initial-state 'emms-browser 'emacs)
    (setq emms-player-mpd-music-directory "~/Music"))
#+END_SRC
* Test
#+BEGIN_SRC emacs-lisp
  (use-package mediawiki
    :defer t
    :config
    (setq mediawiki-site-alist
          '(("Wikipedia" "https://en.wikipedia.org/w/" "Titan-cerberus" "" nil "User:Titan-cerberus")
            ("clusterorlando" "https://www.stem.lps.u-psud.fr/cluster/" "oscar" "" nil "Accueil")
            ("SHAWIKI" "https://wiki.sha2017.org/" "oscar" "" nil "Accueil")
            ("ArchWiki" "https://wiki.archlinux.org/" "" "" nil "Main page"))))
#+END_SRC

#+RESULTS:
