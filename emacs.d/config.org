#+TITLE: Emacs Configuration
#+AUTHOR: Óscar Nájera

* Editor
** Basic behavior settings
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (unless (string-equal (user-login-name) "on")
    (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p))
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (setq-default fill-column 75)
#+END_SRC
** Package management
Make sure =use-package= is installed as it administers all packages
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

(eval-when-compile
    (require 'use-package)
    (setq use-package-verbose t
          use-package-always-defer t
          use-package-always-ensure t))
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :config
    ;; this make ediff open the comand buffer in the same frame is better when using
    ;; the tiling WM awesome
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    (defun ora-ediff-prepare-buffer ()
      "shows all contents of org file when ediffing"
      (when (memq major-mode '(org-mode emacs-lisp-mode))
      (outline-show-all)))

    (add-hook 'ediff-prepare-buffer-hook 'ora-ediff-prepare-buffer)
  )
#+END_SRC
** Spelling
About using hunspell and langtool from https://joelkuiper.eu/spellcheck_emacs
#+BEGIN_SRC emacs-lisp
  ; hunspell is deactivated in my arch machine because somehow version 1.7 does not work with emacs
  (setq ispell-program-name (executable-find "hunspell"))
  ;;(setq ispell-really-hunspell t)
  ;(setq ispell-personal-dictionary "~/dev/helpful_scripts/emacs.d/personal_dict")
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  ;; avoid latex enviromnents in general. May be dangerous
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT latex" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '("[^\\]\\$" . "[^\\]\\$"))
  (add-to-list 'ispell-skip-region-alist '("^\\\\begin" . "^\\\\end"))
  ;; this next line approximately ignores org-ref-links
  (add-to-list 'ispell-skip-region-alist '("cite:" . "[[:space:]]"))
  (add-to-list 'ispell-skip-region-alist '("label:" . "[[:space:]]"))
  (add-to-list 'ispell-skip-region-alist '("ref:" . "[[:space:]]"))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (setq langtool-java-classpath (if (string-equal (user-login-name) "on")
                                    "/home/on/LanguageTool-4.3/*"
                                  "/usr/share/languagetool:/usr/share/java/languagetool/*")
        langtool-mother-tongue "es"
        langtool-default-language "en-US"
        langtool-disabled-rules '("WHITESPACE_RULE")))
#+END_SRC
*** Foreign languages
Documents can be set to default to certain languages that differ from my
default. This makes them save values.
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :bind (("C-c t" . 'google-translate-smooth-translate))
  :init
  (require 'google-translate-smooth-ui)
  (setq google-translate-translation-directions-alist
        '(("de" . "en")
          ("fr" . "en")
          ("es" . "en")
          ("en" . "de")
          ("en" . "es")
          ("en" . "fr")))
  (setq google-translate-pop-up-buffer-set-focus t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values
      (append safe-local-variable-values
              '((google-translate-default-source-language . "de")
                (google-translate-default-target-language . "en")
                (ispell-local-dictionary . "es_EC")
                (ispell-local-dictionary . "de_DE")
                (ispell-local-dictionary . "fr_FR"))))
#+END_SRC
** Pass
#+BEGIN_SRC emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 20))

(use-package pass
    :bind (:map pass-mode-map
           ("r" . pass-next-entry)
           ("t" . pass-prev-entry)
           ("R" . pass-next-directory)
           ("T" . pass-prev-directory)
           ("s" . swiper)
           ("d" . pass-kill)
           ("c" . pass-copy)
           ("n" . pass-rename))
     :config
      (evil-set-initial-state 'pass-mode 'emacs))

;; auth-source-pass is integrated in Emacs 26
(use-package auth-source-pass
:after auth-source
:init
(setq auth-source-debug t
      auth-sources '(password-store))
(auth-source-pass-enable))
#+END_SRC
* Completion
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :commands helm-toggle-resplit-and-swap-windows
  :bind (("M-x" . helm-M-x)
         ("C-x g" . helm-mini)
         :map helm-map
         ("C-p" . helm-toggle-resplit-and-swap-windows))

  :init
  (require 'helm-config)

  (evil-leader/set-key
      "hs" 'helm-semantic-or-imenu
      "hd" 'helm-show-kill-ring
      "hl" 'helm-locate)

  (helm-mode 1))

(use-package helm-ag
  :commands helm-do-age-this-file
  :init (evil-leader/set-key "ho" 'helm-do-ag-this-file))

(use-package helm-projectile
  :commands (helm-projectile-on helm-projectile helm-projectile-ag)
  :init
  (evil-leader/set-key
     "ha" 'helm-projectile-ag
     "p" 'helm-projectile)
  :config
  (require 'tramp)
  (setq projectile-completion-system 'helm)
  (projectile-global-mode)
  (helm-projectile-on)
)

;; Hydra to enter in vim normal state like
;; for speed key bindings
(defhydra helm-vim-normal ()
  ("?" helm-help "help")
  ("<escape>" keyboard-escape-quit "exit")
  ("q" keyboard-escape-quit "exit")
  ("<SPC>" helm-toggle-visible-mark "mark")
  ("m" helm-toggle-all-marks "(un)mark all")
  ("l" helm-execute-persistent-action "persistent")
  ("g" helm-beginning-of-buffer "top")
  ("G" helm-end-of-buffer "bottom")
  ("c" helm-find-files-up-one-level "Dir up")
  ("f" helm-find-files-down-last-level "Dir down")
  ("r" helm-next-line "down")
  ("t" helm-previous-line "up")
  ("n" helm-previous-source "prev src")
  ("s" helm-next-source "next src")
  ("w" helm-toggle-resplit-and-swap-windows "swap windows")
  ("i" nil "cancel"))
(define-key helm-map (kbd "<escape>") 'helm-vim-normal/body)

;;(key-chord-define helm-map "jk" 'helm-like-unite/body)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (setq swiper-action-recenter t)
    (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
    :bind (("C-s" . swiper)
           :map evil-normal-state-map
                ("/" . swiper)
                ("?" . swiper)))

  (use-package ivy
    :bind (:map ivy-minibuffer-map
                ("C-r" . ivy-next-line)
                ("C-t" . ivy-previous-line)
                ("C-n" . ivy-reverse-i-search)))
#+END_SRC
* Org mode
** Main Behavior
#+BEGIN_SRC emacs-lisp
(use-package org
  :pin gnu
  :ensure org
  :bind (("\C-ca" . org-agenda)
         ("\C-cc" . org-capture)
         ("\C-cl" . org-store-link)
         :map org-agenda-mode-map
         ("T" . 'org-agenda-previous-line)
         ("t" . 'org-agenda-previous-item)
         ("R" . 'org-agenda-next-line)
         ("r" . 'org-agenda-next-item)
         ("n" . 'org-agenda-redo)
         ("N" . 'org-agenda-clockreport-mode)
         ("p" . 'org-agenda-todo)
         ("P" . 'org-agenda-show-tags))

  :init
  ;; Refile
  (setq org-refile-targets `((nil :maxlevel . 3)
                             (,(expand-file-name "journal.org" org-directory) :maxlevel . 3)
                             (,(expand-file-name "todo.org" org-directory) :maxlevel . 2)))

  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  ;;imenu
  (setq org-imenu-depth 4)

  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-log-reschedule 'note)

  ;; Text editing
  ;; (setq org-hide-emphasis-markers nil) ;; default is nil
  ;;; emphasis markers can span upto 3 lines
  ;;(setf (nth 4 org-emphasis-regexp-components) 3)
  ;;(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
  ;; Org tags
  (setq org-tags-column -55)
  (setq org-adapt-indentation nil
        org-edit-src-content-indentation 0)

  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist '("m" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("p" . "src python"))

  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metadown
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metaleft
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetadown
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetaleft
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))

  ;; when writting org-mode latex make this count as words to block
  ;; expansion
  (modify-syntax-entry ?_ "w" org-mode-syntax-table)
  (modify-syntax-entry ?^ "w" org-mode-syntax-table)


  (add-to-list 'org-modules 'org-protocol t)
  ;; to interact from external sources
  ;;(server-start)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme . t)
     (haskell .t)
     (latex . t)
     (shell . t)
     (plantuml .t)
     (C . t)
     (dot . t)
     (python . t)))
  (setq org-src-fontify-natively t);; sintax highligting of codeblock in org
  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
  ;;; display/update images in the buffer after I evaluate
  ;;(setq org-image-actual-width '(500))
  ;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

  ;; For html export try https://emacs.stackexchange.com/questions/5669/can-org-babel-replace-code-with-code-output-on-html-export
  ;;Don't need to define html on org-babel-load-languages.
  (defun org-babel-execute:html (body params) body)


  ;; Agenda files
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit t))

  (setq org-agenda-files (append (mapcar (lambda (file)
                                   (expand-file-name file org-directory))
                                   '("caldav.org" "journal.org" "work_journal.org" "todo.org"))
                                 '("~/dev/metasyhabitos/oscar/log.org")))

  (evil-leader/set-key "oa" 'org-agenda)
  (setq org-agenda-start-on-weekday 0)
  (setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 4)))

  ;; Launch day agenda
  (org-agenda-list 1)
  (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))

  (setq org-startup-folded 'overview)
  (add-to-list 'safe-local-variable-values '(org-startup-folded . showall))
)

;; leader shortcuts
(evil-leader/set-key-for-mode 'org-mode
    "ot"  'outline-previous-visible-heading
    "or"  'outline-next-visible-heading
    "oo"  'org-insert-heading
    "os"  'org-sort-list
    "oci" 'org-clock-in
    "oco" 'org-clock-out
    "ocd" 'org-clock-display
    "ocr" 'org-clock-goto
    "oe" 'org-todo)


#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
  ;; code syntax highlighting. See section 12
  ;; http://orgmode.org/worg/org-tutorials/org-latex-export.html
  ;;(add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")))
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-latex-pdf-process '("latexmk -g -pdf -shell-escape -outdir=%o %f"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
    ;(plist-put org-format-latex-options :scale 1.5)
    (setq org-preview-latex-default-process 'imagemagick)
    ;(key-chord-define org-src-mode-map ".." 'org-edit-latex-preview-at-point)
    ;(key-chord-define org-mode-map ".." 'org-toggle-latex-fragment)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-math
  :config
  ;; from https://github.com/vspinu/company-math#activation
  (defun my-latex-mode-setup ()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-latex-commands)) company-backends)))
  (add-hook 'org-mode-hook 'my-latex-mode-setup)

  (add-to-list 'company-math-allow-latex-symbols-in-faces 'org-latex-and-related))
#+END_SRC
** Note taking and references management
#+begin_src emacs-lisp
(use-package org-roam
  :hook (after-init . org-roam-mode)
  :custom (org-roam-directory "~/org/roam")

  :bind (("\C-crf" . org-roam-find-file)
         ("\C-crc" . org-roam-capture)
         ("\C-cri" . org-roam-insert)
         ("\C-cro" . org-roam))
  :config
  (setq org-roam-capture-templates '(("d" "default" plain (function org-roam-capture--get-point)
                                      "%i\n%?"
                                      :file-name "%<%Y%m%d%H%M%S>-${slug}"
                                      :head "#+title: ${title}\n#+CREATED: %U\n#+roam_tags:\n%l\n\n"
                                      :unnarrowed t))
        org-roam-capture-ref-templates '(("l" "web" plain (function org-roam-capture--get-point)
                                          "${body}\n%?"
                                          :file-name "%<%Y%m%d>-${slug}"
                                          :head "#+title: ${title}\n#+CREATED: %U\n#+roam_key: ${ref}\n#+roam_tags:\n\n"
                                          :unnarrowed t)))



  (require 'org-roam-protocol))
#+end_src
#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src
#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :config
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-titlewords 5
        bibtex-autokey-titleword-length nil))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :commands helm-bibtex
  :init
  (evil-leader/set-key "hb" 'helm-bibtex)
  (setq bibtex-completion-bibliography (expand-file-name "biblio.bib" org-directory)
        bibtex-completion-pdf-field "file"
        bibtex-completion-library-path (expand-file-name "bibtex-pdf/" org-directory)
        bibtex-completion-notes-path "~/org/roam/"
        bibtex-completion-notes-template-multiple-files "#+title: ${title} (${year})\n#+author: ${author-or-editor}\n#+roam_key: cite:${=key=}\n")
  :config

  (defun bibtex-completion-open-notes-and-pdf (keys)
    (bibtex-completion-open-pdf keys)
    (bibtex-completion-edit-notes keys))

  (helm-bibtex-helmify-action bibtex-completion-open-notes-and-pdf helm-bibtex-open-notes-and-pdf)
                                        ;(helm-delete-action-from-source "Edit notes with PDF" helm-source-bibtex)
  (helm-add-action-to-source "Edit notes with PDF" 'helm-bibtex-open-notes-and-pdf helm-source-bibtex 1))

(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :init
  (setq org-ref-show-broken-links nil
        org-ref-bibliography-notes bibtex-completion-notes-path
        org-ref-default-bibliography bibtex-completion-bibliography
        org-ref-pdf-directory bibtex-completion-library-path
        org-ref-notes-function 'orb-edit-notes)
  :config
  (key-chord-define bibtex-mode-map "jj" 'org-ref-bibtex-hydra/body)
  (require 'org-ref-pdf)
  (require 'org-ref-url-utils)
  (require 'org-ref-arxiv)
  (require 'doi-utils)
  (setq doi-utils-download-pdf nil
        doi-utils-make-notes nil)
  )
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (defun org-ref-bibtex-assoc-pdf-sup-with-entry (&optional prefix)
    "Prompt for supplementary pdf associated with entry at point and
  rename it.  Check whether a pdf already exists in
  `org-ref-pdf-directory' with the name '[bibtexkey]_sup.pdf'. If the
  file does not exist, rename it to '[bibtexkey]_sup.pdf' using
  `org-ref-bibtex-assoc-pdf-with-entry-move-function' and place it in
  `org-ref-pdf-directory'. Finally set the file field in the bibtex to
  include main pdf and supplementary pdf file locations"
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((file (read-file-name "Select file associated with entry: "))
	     (bibtex-expand-strings t)
             (entry (bibtex-parse-entry t))
             (key (reftex-get-bib-field "=key=" entry))
             (mainpdf (concat org-ref-pdf-directory key ".pdf"))
             (suppdf (concat org-ref-pdf-directory key "_sup.pdf"))
             (key-files (concat ":" mainpdf ":PDF;:" suppdf ":PDF"))
	     (file-move-func (org-ref-bibtex-get-file-move-func prefix)))
        (if (file-exists-p suppdf)
	    (message (format "A file named %s already exists" pdf))
	  (progn
	    (funcall file-move-func file suppdf)
            (bibtex-set-field "file" key-files)
	    (message (format "Created file %s" suppdf)))))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defhydra helm-org-ref-insert-link ()
    ("c" org-ref-helm-insert-cite-link "cite article")
    ("r" org-ref-helm-insert-ref-link "reference link")
    ("l" org-ref-helm-insert-label-link "create label"))

  ;;(key-chord-define org-mode-map "jj" 'helm-org-ref-insert-link/body)
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file ,(expand-file-name "todo.org" org-directory))
         "* TODO %?\n  %U\n%a\n%i" :clock-in t :clock-resume t)

        ("j" "Journal" entry (file+olp+datetree ,(expand-file-name
                                                  "journal.org"
                                                  org-directory))
         "* %(format-time-string \"%H:%M\") %?\n%a\n%i
- Timebox day

- I am grateful for
- What would make today great
- Daily affirmations
- Amazing things that happened yesterday
- How could I have made yesterday even better?"
         :clock-in t :clock-resume t)

        ("h" "Work Journal" entry (file+olp+datetree ,(expand-file-name
                                                       "work_journal.org"
                                                       org-directory))
         "* %(format-time-string \"%H:%M\") %?\n%a\n%i"
         :clock-in t :clock-resume t)

        ("l" "Web site" entry (file+headline ,(concat
                                               org-directory
                                               "/webnotes.org")
                                             "Inbox")
         "* %a\nCaptured On: %U\nWebsite: %l\n%?\n%i\n"
            :clock-in t :clock-resume t)

        ("m" "meetup" entry (file ,(expand-file-name
                                    "caldav.org" org-directory))
         "* %?%:description \n%i")

        ("e" "Event" entry (file ,(expand-file-name
                                   "caldav.org" org-directory))
         "* %?\n%^T\n%i\n%a")
        ("p" "Ledger Cash Expense" plain (file "~/ledger/journal.ledger")
         "%(org-read-date) * %^{Payee}
    Expenses:%^{Account}%?  %^{Amount} EUR
    Expenses:Cash" :empty-lines 1)
))
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; to capture the website HTML
;;(add-to-list 'load-path "~/dev/org-protocol-capture-html/")
;;(require 'org-protocol-capture-html)
#+END_SRC
* Coding
** Linting
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :bind (:map evil-motion-state-map
              ("gL" . flycheck-previous-error)
              ("gl" . flycheck-next-error))

  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
;; Based on the Sarcasm/irony-mode compilation database code.
(defun company-mode/find-clang-complete-file ()
  (when buffer-file-name
    (when-let ((dir (locate-dominating-file buffer-file-name ".clang_complete")))
      (concat (file-name-as-directory dir) ".clang_complete"))))

;; Based on the Sarcasm/irony-mode compilation database code.
(defun company-mode/load-clang-complete-file (cc-file)
  "Load the flags from CC-FILE, one flag per line."
  (let ((invocation-dir (expand-file-name (file-name-directory cc-file)))
        (case-fold-search nil)
        compile-flags)
    (with-temp-buffer
      (insert-file-contents cc-file)
      ;; Replace relative paths with absolute paths (by @trishume)
      ;; (goto-char (point-min))
      (while (re-search-forward "\\(-I\\|-isystem\n\\)\\(\\S-+\\)" nil t)
        (replace-match (format "%s%s" (match-string 1)
                               (expand-file-name (match-string 2) invocation-dir))))
      ;; Turn lines into a list
      (setq compile-flags
            ;; remove whitespaces at the end of each line, if any
            (mapcar #'(lambda (line)
                        (if (string-match "[ \t]+$" line)
                            (replace-match "" t t line)
                          line))
                    (split-string (buffer-string) "\n" t))))
    compile-flags))

(defun c-c++/load-clang-args ()
  "Sets the arguments for company-clang, the system paths for company-c-headers
and the arguments for flyckeck-clang based on a project-specific text file."
  (unless company-clang-arguments
    (let* ((cc-file (company-mode/find-clang-complete-file))
           (flags (if cc-file (company-mode/load-clang-complete-file cc-file) '()))
           (dirs (mapcar (lambda (f) (substring f 2))
                         (remove-if-not (lambda (f) (string-prefix-p "-I" f)) flags))))
      (setq-local company-clang-arguments flags)
      (setq-local company-c-headers-path-system (append '("/usr/include" "/usr/local/include") dirs))
      (setq-local flycheck-clang-args flags))))

(add-hook 'c-mode-common-hook 'c-c++/load-clang-args)
#+END_SRC
* Email
** Composer
#+BEGIN_SRC emacs-lisp
  ;; linebreak in message editing
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t)
    :config
    (add-hook 'twittering-edit-mode-hook (lambda () (ispell-minor-mode) (flyspell-mode)))

    :bind (:map twittering-mode-map
           ("r" . twittering-goto-next-status)
           ("t" . twittering-goto-previous-status)))
#+END_SRC
* Pdf-Reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode (("\\.pdf$" . pdf-view-mode))
    :bind (:map pdf-view-mode-map
                ("r" . pdf-view-scroll-up-or-next-page)
                ("R" . pdf-view-next-page-command)
                ("t" . pdf-view-scroll-down-or-previous-page)
                ("T" . pdf-view-previous-page-command)
                ("C-s" . isearch-forward)
                ("a" . pdf-annot-list-annotations)
    )
    :config
    (pdf-tools-install)
    (evil-define-key 'normal pdf-annot-list-mode-map
     "f" 'pdf-annot-list-display-annotation-from-id
     "d" 'tablist-flag-forward
     "x" 'tablist-do-flagged-delete
     "u" 'tablist-unmark-forward
     "q" 'tablist-quit)
    (evil-set-initial-state 'pdf-view-mode 'emacs))

#+END_SRC
** TODO save & anotations
http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
* Circe
#+BEGIN_SRC emacs-lisp
(use-package circe
    :config
    (setq circe-default-user "Titan-C")
    (setq circe-network-options
      '(("Freenode"
         :tls t
         :nick "Titan-C"
         :channels ("#emacs-circe" "#clojure")))))
#+END_SRC
