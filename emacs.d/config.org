#+TITLE: Emacs Configuration
#+AUTHOR: Oscar Najera

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "najera.oscar@gmail.com"
        user-full-name    "Óscar Nájera")
#+END_SRC

* Editor
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("~/.emacs.d/backups")))
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (electric-pair-mode)
  (add-hook 'text-mode-hook 'visual-line-mode) ;; word-wrap
  (setq safe-local-variable-values '((ispell-dictionary . "spanish")))
#+END_SRC
** Style
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
   :config
   (load-theme 'zenburn t))
  (use-package spaceline-config
  :ensure spaceline
  :config
  (spaceline-spacemacs-theme)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
        powerline-default-separator 'wave))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package relative-line-numbers
    :init
    (add-hook 'prog-mode-hook 'relative-line-numbers-mode)
    (setq relative-line-numbers-motion-function 'forward-visible-line))
#+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind (("M-p" . ace-window))
    :config (setq aw-keys '(?a ?o ?e ?d ?r ?t ?n ?s)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'windmove)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)

  (use-package hydra
    :init
    (defhydra hydra-window ()
       "
    Movement^^        ^Split^         ^Switch^      ^Resize^
    ----------------------------------------------------------------
    _n_ ←         _d_ vertical      _g_ buffer      _N_ ←
    _r_ ↓         _q_ horizontal    _f_ind files    _R_ ↓
    _t_ ↑         _._ undo          _c_ ace 1       _T_ ↑
    _s_ →         _:_ reset         _h_ swap        _S_ →
    _F_ollow        _D_lt Other     _p_roject files _m_aximize
    _SPC_ cancel    onl_y_ this     _x_ delete
    "
       ("r" windmove-down )
       ("t" windmove-up )
       ("n" windmove-left )
       ("s" windmove-right )
       ("N" hydra-move-splitter-left)
       ("R" hydra-move-splitter-down)
       ("T" hydra-move-splitter-up)
       ("S" hydra-move-splitter-right)
       ("g" helm-mini)
       ("p" helm-projectile)
       ("f" helm-find-files)
       ("F" follow-mode)
       ("c" (lambda ()
              (interactive)
              (ace-window 1)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body))
           )
       ("d" (lambda ()
              (interactive)
              (split-window-right)
              (windmove-right))
           )
       ("q" (lambda ()
              (interactive)
              (split-window-below)
              (windmove-down))
           )
       ("h" (lambda ()
              (interactive)
              (ace-window 4)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body)))
       ("x" delete-window)
       ("D" (lambda ()
              (interactive)
              (ace-window 16)
              (add-hook 'ace-window-end-once-hook
                        'hydra-window/body))
           )
       ("y" delete-other-windows)
       ("m" ace-maximize-window)
       ("." (progn
              (winner-undo)
              (setq this-command 'winner-undo))
       )
       (":" winner-redo)
       ("SPC" nil)
       )
    ;; Launch this Hydra with Space+w
    (key-chord-define-global " w" 'hydra-window/body))
#+END_SRC

** Evil-mode
#+BEGIN_SRC emacs-lisp
  (unless (fboundp 'evil-leader-mode)
  (package-install 'evil-leader))
  (global-evil-leader-mode)
  (setq evil-search-module 'evil-search)
  (require 'evil)
  (evil-mode 1)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
      "x" 'helm-M-x
      "f" 'helm-find-files
      "p" 'helm-projectile
      "t" 'magit-status
      "m" 'notmuch-hello
      "s" 'eshell
      "q" 'kill-this-buffer
      "Q" 'kill-buffer-and-window
      "oa" 'org-agenda
      "r" 'avy-goto-char
      "c" 'avy-goto-word-1
      "g" 'helm-mini)

  ;;(global-set-key [escape] 'keyboard-quit)
  (global-set-key [escape] 'helm-keyboard-quit)


  (use-package key-chord
    :init
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define evil-insert-state-map "tn" 'evil-normal-state)
      (key-chord-define-global "ww" (lambda () (interactive) (save-buffer)
                                               (evil-normal-state)))
    :config
      (key-chord-mode 1))

  (use-package avy
  :ensure t )
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "r" nil) ;; block replace
(define-key evil-motion-state-map "n" 'evil-backward-char) ;; back
(define-key evil-insert-state-map "\C-l" 'evil-delete-backward-char)
(define-key evil-insert-state-map "\C-r" 'evil-delete-backward-word)

(define-key evil-motion-state-map "r" 'evil-next-line) ;; next line
(define-key evil-motion-state-map "l" 'evil-search-next) ;; next look up
(define-key evil-motion-state-map "L" 'evil-search-previous)
(define-key evil-motion-state-map "t" 'evil-previous-line) ;; top back up
(define-key evil-normal-state-map "T" 'evil-join) ;; line together

(define-key evil-normal-state-map "s" nil) ;; remove substitute
(define-key evil-motion-state-map "s" 'evil-forward-char)  ;; moves right

(define-key evil-normal-state-map "h" 'evil-replace)
(define-key evil-visual-state-map "h" 'evil-replace) ;; because it seems to respect old motion
(define-key evil-motion-state-map "j" 'evil-find-char-to)
(define-key evil-motion-state-map "J" 'evil-find-char-to-backward)
(define-key evil-normal-state-map "k" 'redo)
(define-key evil-motion-state-map "k" nil) ;; to block old motion

;; end and begining of lines
(define-key evil-motion-state-map "-" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
;; modify dired keys
(progn
(require 'dired )
(evil-set-initial-state 'dired-mode 'emacs)
(define-key dired-mode-map "t" 'dired-previous-line)
(define-key dired-mode-map "r" 'dired-next-line)
(define-key dired-mode-map "p" 'dired-toggle-marks)
)
#+END_SRC
** Spelling
About using hunspell and langtool from https://joelkuiper.eu/spellcheck_emacs
#+BEGIN_SRC emacs-lisp
  (setq-default ispell-program-name (executable-find "hunspell"))
  (setq ispell-really-hunspell t)

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :config
    (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"
          langtool-mother-tongue "es"
          langtool-disabled-rules '("WHITESPACE_RULE")))
#+END_SRC
** Add-ons
#+BEGIN_SRC emacs-lisp
  (use-package ssh
  :ensure t)
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
    (exec-path-from-shell-copy-env "SSH_AGENT_PID"))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :bind (("M-x" . helm-M-x)
             ("C-x g" . helm-mini))
      :config
      (require 'helm-config)
      (define-key helm-map (kbd "C-p") 'helm-toggle-resplit-and-swap-windows)

      (evil-leader/set-key
          "hs" 'helm-semantic-or-imenu
          "hd" 'helm-show-kill-ring
          "hl" 'helm-locate)

      (helm-mode 1))

  (use-package helm-ag
      :ensure t
      :config
      (evil-leader/set-key "ho" 'helm-do-ag-this-file)
  )

  (use-package helm-projectile
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      (evil-leader/set-key "ha" 'helm-projectile-ag)
  )

  (use-package hydra
      ;; Hydra to enter in vim normal state like
      ;; for speed key bindings
      :init
      (defhydra helm-vim-normal ()
          ("?" helm-help "help")
          ("<escape>" keyboard-escape-quit "exit")
          ("q" keyboard-escape-quit "exit")
          ("<SPC>" helm-toggle-visible-mark "mark")
          ("m" helm-toggle-all-marks "(un)mark all")
          ("l" helm-execute-persistent-action "persistent")
          ("g" helm-beginning-of-buffer "top")
          ("G" helm-end-of-buffer "bottom")
          ("c" helm-find-files-up-one-level "Dir up")
          ("f" helm-find-files-down-last-level "Dir down")
          ("r" helm-next-line "down")
          ("t" helm-previous-line "up")
          ("n" helm-previous-source "prev src")
          ("s" helm-next-source "next src")
          ("w" helm-toggle-resplit-and-swap-windows "swap windows")
          ("i" nil "cancel"))

      (define-key helm-map (kbd "<escape>") 'helm-vim-normal/body)

      ;;(key-chord-define helm-map "jk" 'helm-like-unite/body)
  )
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-/" 'hippie-expand)

  (use-package company
    :bind (:map company-active-map
              ("C-r" . company-select-next)
              ("C-t" . company-select-previous)
           :map company-search-map
              ("C-r" . company-select-next)
              ("C-t" . company-select-previous))
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0.2
            company-selection-wrap-around t)
      )



  (use-package yasnippet
  :config (yas-global-mode t))
#+END_SRC
* Orgmode
** Main Behavior
#+BEGIN_SRC emacs-lisp
  (use-package org-plus-contrib
    :bind (("\C-ca" . org-agenda)
           ("\C-cc" . org-capture)
           ("\C-cl" . org-store-link))
    :init
    (add-hook 'org-agenda-mode-hook (lambda ()
     (define-key org-agenda-mode-map "T" 'org-agenda-previous-line)
     (define-key org-agenda-mode-map "t" 'org-agenda-previous-item)
     (define-key org-agenda-mode-map "R" 'org-agenda-next-line)
     (define-key org-agenda-mode-map "r" 'org-agenda-next-item)
     (define-key org-agenda-mode-map "n" 'org-agenda-redo)
     (define-key org-agenda-mode-map "N" 'org-agenda-clockreport-mode)
     (define-key org-agenda-mode-map "p" 'org-agenda-todo)
     (define-key org-agenda-mode-map "P" 'org-agenda-show-tags)))

    ;; Work directories
    (setq org-directory "~/Dropbox/org"
      org-mobile-directory "~/Dropbox/MobileOrg"
      org-mobile-inbox-for-pull "~/Dropbox/org/mobilecaptures.org")

    ;; Refile
    (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                  ("~/Dropbox/org/journal.org" :maxlevel . 3)
                                  ("~/Dropbox/org/todo.org" :maxlevel . 2))))
    (setq org-refile-use-outline-path nil)

    ;; Agenda files
    (setq org-agenda-files (list "~/Dropbox/org/schedule.org"
                                "~/Dropbox/org/journal.org"
                                "~/Dropbox/org/todo.org"))
    (setq org-agenda-start-on-weekday 0)
    (setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 4)))

    ;; Text editing
    (setq org-hide-emphasis-markers t)
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'flyspell-mode))

  ;; leader shortcuts
  (evil-leader/set-key-for-mode 'org-mode
      "ot"  'outline-previous-visible-heading
      "or"  'outline-next-visible-heading
      "oo"  'org-insert-heading
      "os"  'org-sort-list
      "oci" 'org-clock-in
      "oco" 'org-clock-out
      "ocd" 'org-clock-display
      "oe" 'org-todo)

  ;; Launch day agenda
  (org-agenda-list 1)
  (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))

  (use-package org-pdfview
    :init
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))
    (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))
    )
#+END_SRC

** Alerts
This is to set the reminders of calendar events to desktop notify
*** WAIT Find notifications setup org-alert is too annoying
    - State "WAIT"       from "TODO"       [2016-05-28 Sat 12:44] \\
      Testing how it works using appt
#+BEGIN_SRC emacs-lisp
  (setq
    appt-display-mode-line t     ;; show in the modeline
    appt-display-format 'window) ;; use our func
  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...

  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
  (key-chord-define org-mode-map ".." 'org-toggle-latex-fragment)
  ;; code syntax highlighting. See section 12
  ;; http://orgmode.org/worg/org-tutorials/org-latex-export.html
  (setq org-latex-listings 'minted)
  (setq org-latex-custom-lang-environments
        '(
         (emacs-lisp "common-lispcode")
          ))
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; ** <<APS journals>>
  (require 'ox-latex)
  (add-to-list 'org-latex-classes '("revtex4-1"
                                    "\\documentclass{revtex4-1}
  [PACKAGES]
  [EXTRA]"
                                     ("\\section{%s}" . "\\section*{%s}")
                                     ("\\subsection{%s}" . "\\subsection*{%s}")
                                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes '("letter"
                      "\\documentclass{letter}
       \[DEFAULT-PACKAGES]
       \[PACKAGES]
       \[EXTRA]"))
#+END_SRC
*** bibtex
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "bibtex %b"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-capture-templates
      '(("t" "Task" entry (file "~/Dropbox/org/todo.org")
          "* TODO %?\n  %U\n  %i\n  %a" :clock-in t :clock-resume t)
        ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("l" "Lab Journal Entry" entry (file+datetree "~/Dropbox/org/PHD_Journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("e" "Event" entry (file "~/Dropbox/org/schedule.org")
          "* %?\n  %^T\n  %i\n  %a" :clock-in t :clock-resume t)))
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t);; sintax highligting of codeblock in org
  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
  (setq org-export-babel-evaluate nil)    ;don't execute code blocks during export
  ;;; display/update images in the buffer after I evaluate
  (setq org-image-actual-width '(500))
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (setq org-babel-python-command "ipython")
#+END_SRC
*** RevealJS
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:init
(setq org-reveal-root "file:///home/oscar/dev/reveal.js"))
#+END_SRC
** Bibliography references
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :init
    (evil-leader/set-key
      "hb" 'helm-bibtex))
    :config
    (setq bibtex-completion-bibliography '("~/Documents/zotero.bib" "~/Dropbox/arxiv.bib" "~/Documents/library.bib"))
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-library-path "~/Dropbox/bibtex-pdf/")
    (setq bibtex-completion-notes-path "~/Dropbox/org/WorkPhys/literature_notes.org")

    (defun bibtex-completion-open-notes-and-pdf (key)
         (bibtex-completion-open-pdf key)
         (bibtex-completion-edit-notes key)
        )
    (helm-add-action-to-source "Edit notes with PDF" 'bibtex-completion-open-notes-and-pdf helm-source-bibtex 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
   :init
   (setq org-ref-bibliography-notes bibtex-completion-notes-path)
   (setq org-ref-default-bibliography bibtex-completion-bibliography)
   (setq org-ref-pdf-directory bibtex-completion-library-path)
   (require 'org-ref-pdf)
   (require 'org-ref-url-utils)
   (require 'org-ref-arxiv)
   (require 'doi-utils)
   (setq doi-utils-download-pdf nil
         doi-utils-make-notes nil)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defhydra helm-org-ref-insert-link ()
    ("c" org-ref-helm-insert-cite-link "cite article")
    ("r" org-ref-helm-insert-ref-link "reference link")
    ("l" org-ref-helm-insert-label-link "create label"))

  (key-chord-define org-mode-map "jj" 'helm-org-ref-insert-link/body)
#+END_SRC
** Key Bindings
*** normal & insert state shortcuts.
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metadown
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metaleft
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetadown
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetaleft
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:mode "\\.md//'"
:init
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
:ensure auctex
:init
(setq LaTeX-command "latex -shell-escape"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :init
  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
  :config
  (define-key magit-mode-map "t" 'magit-section-backward)
  (define-key magit-mode-map "\M-t" 'magit-section-backward-sibling)
  (define-key magit-mode-map "r" 'magit-section-forward)
  (define-key magit-mode-map "\M-r" 'magit-section-forward-sibling)

  (define-key magit-mode-map "p" 'magit-tag-popup)
  (define-key magit-mode-map "n" 'magit-rebase-popup))

  (use-package magit-gh-pulls
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC
* Coding
** Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  :init
  (define-key evil-motion-state-map "gL" 'flycheck-previous-error)
  (define-key evil-motion-state-map "gl" 'flycheck-next-error)
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
      :init
          (add-hook 'python-mode-hook 'flyspell-prog-mode)
          (elpy-enable)
      :config
          (pyvenv-activate "~/miniconda3/envs/hpc3/")
          (setq elpy-rpc-backend "jedi")
          (remove-hook 'elpy-modules 'elpy-module-flymake)
          (elpy-use-ipython)
          (setq python-shell-interpreter-args "--simple-prompt --pprint")
          (setq python-shell-completion-native-enable nil)
          (evil-define-key 'motion python-mode-map "gd" 'elpy-goto-definition)
          (setq elpy-test-runner 'elpy-test-pytest-runner)
   )

  (use-package py-autopep8
      :config
          (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  (use-package cython-mode
      :mode (("\\.pyx" . cython-mode)))

  (use-package yaml-mode :ensure t)
#+END_SRC
*** IPython Notebook
#+BEGIN_SRC emacs-lisp
  (use-package ein
      :ensure t
      :init (evil-leader/set-key "ipn" 'ein:notebooklist-open)
      :config
      (require 'ein-multilang)
      (setq ein:complete-on-dot t
            ein:use-auto-complete t)
      (mapc (lambda (state)
          (evil-define-key state ein:notebook-multilang-mode-map
              (kbd "M-y") 'ein:worksheet-copy-cell
              (kbd "M-p") 'ein:worksheet-yank-cell
              (kbd "M-d") 'ein:worksheet-kill-cell
              (kbd "M-o") 'ein:worksheet-insert-cell-below
              (kbd "M-O") 'ein:worksheet-insert-cell-above

              (kbd "M-r") 'ein:worksheet-goto-next-input
              (kbd "M-t") 'ein:worksheet-goto-prev-input
              (kbd "M-R") 'ein:worksheet-move-cell-down
              (kbd "M-T") 'ein:worksheet-move-cell-up

              (kbd "M-h") 'ein:worksheet-toggle-output
              )) '(normal insert))
  )
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
   :ensure t)
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode (("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

* Email
** client
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :bind (:map notmuch-hello-mode-map
          ("l" . notmuch-jump-search)
          ("/" . notmuch-tree)
          :map notmuch-search-mode-map
          ("r" . notmuch-search-next-thread)
          ("N" . notmuch-search-reply-to-thread)
          ("t" . notmuch-search-previous-thread)
          ("f" . notmuch-search-filter-by-tag)
          ("/" . notmuch-tree)
          :map notmuch-tree-mode-map
          ("r" . notmuch-tree-next-matching-message)
          ("t" . notmuch-tree-prev-matching-message)
          ("R" . notmuch-tree-next-message)
          ("T" . notmuch-tree-prev-message)
          :map notmuch-show-mode-map
          ("N" . notmuch-show-reply)
          ("n" . notmuch-show-reply-sender)
          ("r" . notmuch-show-next-message)
          ("t" . notmuch-show-previous-message)
          )
    :config
      (define-key notmuch-tree-mode-map "n"
        (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
      (define-key notmuch-tree-mode-map "N"
        (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
      (setq notmuch-search-oldest-first nil)
      (evil-set-initial-state 'notmuch-tree-mode 'emacs)
  )

  (use-package helm-notmuch
    :ensure t)
#+END_SRC
** BBDB
#+BEGIN_SRC emacs-lisp
  (use-package bbdb
  :init
  (setq bbdb-file "~/Dropbox/bbdb"
          bbdb-offer-save 'auto
          bbdb-notice-auto-save-file t
          bbdb-expand-mail-aliases t
          bbdb-canonicalize-redundant-nets-p t
          bbdb-always-add-addresses t
          bbdb-complete-name-allow-cycling t
  )
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  :config
  (bbdb-initialize 'gnus 'message)
  (bbdb-insinuate-message))
#+END_SRC
** Composer
#+BEGIN_SRC emacs-lisp
  ;; linebreak in message editing
  (defun my-message-mode-setup ()
  (setq fill-column 72)
  (turn-on-auto-fill))

  (add-hook 'message-mode-hook 'my-message-mode-setup)
  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
  (use-package org-mime
    :ensure org-plus-contrib
    :defer t
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
(use-package twittering-mode
:init
(setq twittering-use-master-password t)
(setq twittering-icon-mode t)
(setq twittering-use-icon-storage t))
#+END_SRC
** Send
#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
        smtpmail-smtp-server "smtp.googlemail.com"
        smtpmail-smtp-service 587)
#+END_SRC

* RSS
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
      :commands elfeed
      :bind (:map elfeed-search-mode-map
              ("r" . next-line)
              ("t" . previous-line)
              ("n" . elfeed-search-untag-all-unread)
             :map elfeed-show-mode-map
             ("r" . elfeed-show-next)
             ("t" . elfeed-show-prev)
             )
    :config
      (setq elfeed-feeds (quote ("http://arxiv.org/rss/cond-mat.str-el")))
      (evil-set-initial-state 'elfeed-show-mode 'emacs)
      (evil-set-initial-state 'elfeed-search-mode 'emacs))
#+END_SRC
* Pdf-Reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode (("\\.pdf$" . pdf-view-mode))
    :bind (:map pdf-view-mode-map
                ("r" . pdf-view-scroll-up-or-next-page)
                ("R" . pdf-view-next-page-command)
                ("t" . pdf-view-scroll-down-or-previous-page)
                ("T" . pdf-view-previous-page-command))
    :config
    (pdf-tools-install)
    (evil-set-initial-state 'pdf-view-mode 'emacs))
#+END_SRC
