#+TITLE: Emacs Configuration
#+AUTHOR: Oscar Najera

* Personal Information
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "najera.oscar@gmail.com"
        user-full-name    "Óscar Nájera")
#+END_SRC

* Editor
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("~/.emacs.d/backups")))
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (electric-pair-mode)
  (add-hook 'text-mode-hook 'visual-line-mode)
#+END_SRC
** Style
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
   :config
   (load-theme 'zenburn t))
  (use-package powerline-evil
  :config
  (powerline-default-theme))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package relative-line-numbers
    :init
    (add-hook 'prog-mode-hook 'relative-line-numbers-mode)
    (add-hook 'text-mode-hook 'relative-line-numbers-mode)
    (setq relative-line-numbers-motion-function 'forward-visible-line))
#+END_SRC

** Evil-mode
#+BEGIN_SRC emacs-lisp
  (unless (fboundp 'evil-leader-mode)
  (package-install 'evil-leader))
  (global-evil-leader-mode)
  (setq evil-search-module 'evil-search)
  (require 'evil)
  (evil-mode 1)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
      "x" 'helm-M-x
      "e" 'helm-find-files
      "p" 'helm-projectile
      "t" 'magit-status
      "m" 'gnus
      "ha" 'helm-projectile-ag
      "s" 'eshell
      "w" 'save-buffer
      "q" 'kill-this-buffer
      "Q" 'kill-buffer-and-window
      "oa" 'org-agenda
      "r" 'avy-goto-char
      "c" 'avy-goto-word-1
      "g" 'helm-mini)

  ;;(global-set-key [escape] 'keyboard-quit)
  (global-set-key [escape] 'helm-keyboard-quit)


  (use-package key-chord
  :init
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define evil-insert-state-map "tn" 'evil-normal-state)
  :config
      (key-chord-mode 1))

  (use-package avy
  :ensure t )
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "r" nil) ;; block replace
(define-key evil-motion-state-map "r" 'evil-backward-char) ;; back
(define-key evil-insert-state-map "\C-l" 'evil-delete-backward-char)
(define-key evil-insert-state-map "\C-r" 'evil-delete-backward-word)

(define-key evil-motion-state-map "n" 'evil-next-line) ;; next line
(define-key evil-motion-state-map "l" 'evil-search-next) ;; next look up
(define-key evil-motion-state-map "L" 'evil-search-previous)
(define-key evil-motion-state-map "t" 'evil-previous-line) ;; top back up
(define-key evil-normal-state-map "T" 'evil-join) ;; line together

(define-key evil-normal-state-map "s" nil) ;; remove substitute
(define-key evil-motion-state-map "s" 'evil-forward-char)  ;; moves right

(define-key evil-normal-state-map "h" 'evil-replace)
(define-key evil-visual-state-map "h" 'evil-replace) ;; because it seems to respect old motion
(define-key evil-motion-state-map "j" 'evil-find-char-to)
(define-key evil-motion-state-map "J" 'evil-find-char-to-backward)
(define-key evil-normal-state-map "k" 'redo)
(define-key evil-motion-state-map "k" nil) ;; to block old motion

;; end and begining of lines
(define-key evil-motion-state-map "-" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)

(define-key evil-normal-state-map (kbd "C-r") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-n") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-t") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-s") 'evil-window-right)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
;; modify dired keys
(progn
(require 'dired )
(define-key dired-mode-map "t" 'dired-previous-line)
(define-key dired-mode-map "p" 'dired-toggle-marks)
)
#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
#+END_SRC
** Add-ons
#+BEGIN_SRC emacs-lisp
(use-package ssh
:ensure t)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
  :bind (("M-x" . helm-M-x)
         ("C-x g" . helm-mini))
  :config
  (require 'helm-config)
  (define-key helm-map (kbd "C-f") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-t") 'helm-previous-line)
  (define-key helm-map (kbd "C-p") 'helm-toggle-resplit-and-swap-windows)
  (evil-leader/set-key
      "hs" 'helm-semantic-or-imenu
      "hd" 'helm-show-kill-ring
      "hl" 'helm-locate
      "ho" 'helm-occur)
  (helm-mode 1))

  (use-package helm-projectile
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :ensure t)
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-/" 'hippie-expand)
(use-package company
:init
(add-hook 'after-init-hook 'global-company-mode))
(use-package yasnippet
:config (yas-global-mode t))
#+END_SRC
* Orgmode
** Main Behavior
#+BEGIN_SRC emacs-lisp
  (use-package org-plus-contrib
    :bind (("\C-cl" . org-store-link))
    :init
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-mode-hook 'flyspell-mode))

  (setq org-directory "~/Dropbox/org"
      org-mobile-directory "~/Dropbox/MobileOrg"
      org-mobile-inbox-for-pull "~/Dropbox/org/mobilecaptures.org")


  (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                  ("~/Dropbox/org/journal.org" :maxlevel . 3)
                                  ("~/Dropbox/org/todo.org" :maxlevel . 2))))

  (setq org-refile-use-outline-path nil)

  (evil-leader/set-key-for-mode 'org-mode
      "ot"  'outline-previous-visible-heading
      "on"  'outline-next-visible-heading
      "oo"  'org-insert-heading
      "os"  'org-sort-list
      "oci" 'org-clock-in
      "oco" 'org-clock-out
      "ocd" 'org-clock-display
      "oe" 'org-todo)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package org-plus-contrib
    :bind (("\C-ca" . org-agenda)
           ("\C-cc" . org-capture)
           :map org-agenda-mode-map
                ("t" . org-agenda-previous-line)
                ("T" . org-agenda-previous-item)
                ("p" . org-agenda-todo)
                ("P" . org-agenda-show-tags))
    :init
    (setq org-agenda-start-on-weekday 0)
    (setq org-agenda-files (list "~/Dropbox/org/schedule.org"
                                "~/Dropbox/org/journal.org"
                                "~/Dropbox/org/todo.org"))
    (org-agenda-list 1)
    (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))
  )
#+END_SRC
** Alerts
This is to set the reminders of calendar events to desktop notify
#+BEGIN_SRC emacs-lisp
  (use-package org-alert
    :ensure t
    :init
    (setq alert-default-style 'libnotify)
    (setq org-alert-interval 1200)
    :config
    (org-alert-enable))
#+END_SRC
** Latex
*** Formula live toggling
This is to render latex formulas in the org buffer live after
editing. Extracted from [[http://kitchingroup.cheme.cmu.edu/blog/2015/10/09/Automatic-latex-image-toggling-when-cursor-is-on-a-fragment/][Automatic latex image toggling when cursor is
on a fragment]]

#+BEGIN_SRC emacs-lisp
  ;; Previewing latex fragments in org mode
  (setq org-latex-create-formula-image-program 'imagemagick) ;; Recommended to use imagemagick

  (defvar org-latex-fragment-last nil
    "Holds last fragment/environment you were on.")

  (defun org-latex-fragment-toggle ()
    "Toggle a latex fragment image "
    (and (eq 'org-mode major-mode)
         (let* ((el (org-element-context))
                (el-type (car el)))
           (cond
            ;; were on a fragment and now on a new fragment
            ((and
              ;; fragment we were on
              org-latex-fragment-last
              ;; and are on a fragment now
              (or
               (eq 'latex-fragment el-type)
               (eq 'latex-environment el-type))
              ;; but not on the last one this is a little tricky. as you edit the
              ;; fragment, it is not equal to the last one. We use the begin
              ;; property which is less likely to change for the comparison.
              (not (= (org-element-property :begin el)
                      (org-element-property :begin org-latex-fragment-last))))
             ;; go back to last one and put image back
             (save-excursion
               (goto-char (org-element-property :begin org-latex-fragment-last))
               (org-preview-latex-fragment))
             ;; now remove current image
             (goto-char (org-element-property :begin el))
             (let ((ov (loop for ov in (org--list-latex-overlays)
                             if
                             (and
                              (<= (overlay-start ov) (point))
                              (>= (overlay-end ov) (point)))
                             return ov)))
               (when ov
                 (delete-overlay ov)))
             ;; and save new fragment
             (setq org-latex-fragment-last el))

            ;; were on a fragment and now are not on a fragment
            ((and
              ;; not on a fragment now
              (not (or
                    (eq 'latex-fragment el-type)
                    (eq 'latex-environment el-type)))
              ;; but we were on one
              org-latex-fragment-last)
             ;; put image back on
             (save-excursion
               (goto-char (org-element-property :begin org-latex-fragment-last))
               (org-preview-latex-fragment))
             ;; unset last fragment
             (setq org-latex-fragment-last nil))

            ;; were not on a fragment, and now are
            ((and
              ;; we were not one one
              (not org-latex-fragment-last)
              ;; but now we are
              (or
               (eq 'latex-fragment el-type)
               (eq 'latex-environment el-type)))
             (goto-char (org-element-property :begin el))
             ;; remove image
             (let ((ov (loop for ov in (org--list-latex-overlays)
                             if
                             (and
                              (<= (overlay-start ov) (point))
                              (>= (overlay-end ov) (point)))
                             return ov)))
               (when ov
                 (delete-overlay ov)))
             (setq org-latex-fragment-last el))))))


  (add-hook 'post-command-hook 'org-latex-fragment-toggle)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; ** <<APS journals>>
  (require 'ox-latex)
  (add-to-list 'org-latex-classes '("revtex4-1"
                                    "\\documentclass{revtex4-1}
  [PACKAGES]
  [EXTRA]"
                                     ("\\section{%s}" . "\\section*{%s}")
                                     ("\\subsection{%s}" . "\\subsection*{%s}")
                                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

*** bibtex
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f"
                                "bibtex %b"
                                "pdflatex -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-capture-templates
      '(("t" "Task" entry (file+headline "~/Dropbox/org/notes.org" "Tasks")
          "* TODO %?\n  %U\n  %i\n  %a" :clock-in t :clock-resume t)
        ("j" "Journal Entry" entry (file+datetree "~/Dropbox/org/journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("l" "Lab Journal Entry" entry (file+datetree "~/Dropbox/org/PHD_Journal.org")
          "* %(format-time-string \"%H:%M\") %?\n  %i\n  %a" :clock-in t :clock-resume t)
        ("e" "Event" entry (file "~/Dropbox/org/schedule.org")
          "* %?\n  %^T\n  %i\n  %a" :clock-in t :clock-resume t)))
#+END_SRC
** Babel
*** IPython
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t);; sintax highligting of codeblock in org
(use-package ob-ipython
  :ensure t)
(setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC
*** RevealJS
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:init
(setq org-reveal-root "file:///home/oscar/dev/reveal.js"))
#+END_SRC
** Bibliography references
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :init
    (setq helm-bibtex-bibliography '("~/Dropbox/arxiv.bib" "~/Documents/library.bib"))
    (setq helm-bibtex-pdf-field "file")
    (setq helm-bibtex-library-path "~/Dropbox/bibtex-pdf/")
    (setq helm-bibtex-notes-path "~/Dropbox/org/WorkPhys/literature_notes.org")

    (evil-leader/set-key
      "hb" 'helm-bibtex))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
   :init
   (setq org-ref-bibliography-notes 'helm-bibtex-notes-path)
   (setq org-ref-default-bibliography helm-bibtex-bibliography)
   (setq org-ref-pdf-directory helm-bibtex-library-path)
   :config
   (require 'org-ref-pdf)
   (require 'org-ref-url-utils)
   (require 'org-ref-arxiv)
  )
#+END_SRC
** Key Bindings
*** normal & insert state shortcuts.
#+BEGIN_SRC emacs-lisp
  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metaleft
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metadown
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetaleft
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetadown
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:mode "\\.md//'"
:init
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
:ensure auctex
:init
(setq LaTeX-command "latex -shell-escape"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :init
  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'git-commit-mode-hook 'evil-insert-state)
  :config
  (define-key magit-mode-map "t" 'magit-section-backward)
  (define-key magit-mode-map "\M-t" 'magit-section-backward-sibling)
  (define-key magit-mode-map "p" 'magit-tag-popup))

  (use-package magit-gh-pulls
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))
#+END_SRC
* Coding
** Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  :init
  (define-key evil-motion-state-map "gL" 'flycheck-previous-error)
  (define-key evil-motion-state-map "gl" 'flycheck-next-error)
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy :ensure t :defer t)

  (use-package python
      :mode (("\\.py" . python-mode))
      :init
          (add-hook 'python-mode-hook 'flyspell-prog-mode)
      :config
          (elpy-enable)
          (remove-hook 'elpy-modules 'elpy-module-flymake)
          (elpy-use-ipython)
   )

  (use-package py-autopep8
      :config
          (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  (use-package cython-mode
      :mode (("\\.pyx" . cython-mode)))

  (use-package yaml-mode :ensure t)
#+END_SRC
*** IPython Notebook
#+BEGIN_SRC emacs-lisp
  (use-package ein
      :ensure t
      :init (evil-leader/set-key "ipn" 'ein:notebooklist-open)
      :config
      (require 'ein-multilang)
      (mapc (lambda (state)
          (evil-define-key state ein:notebook-multilang-mode-map
              (kbd "M-y") 'ein:worksheet-copy-cell
              (kbd "M-p") 'ein:worksheet-yank-cell
              (kbd "M-d") 'ein:worksheet-kill-cell
              (kbd "M-o") 'ein:worksheet-insert-cell-below
              (kbd "M-O") 'ein:worksheet-insert-cell-above

              (kbd "M-n") 'ein:worksheet-goto-next-input
              (kbd "M-t") 'ein:worksheet-goto-prev-input
              (kbd "M-N") 'ein:worksheet-move-cell-down
              (kbd "M-T") 'ein:worksheet-move-cell-up

              (kbd "M-h") 'ein:worksheet-toggle-output
              (kbd "M-R") 'ein:worksheet-rename-sheet
              )) '(normal insert))
  )
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
   :ensure t)
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode (("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))
#+END_SRC

* Email
** BBDB
#+BEGIN_SRC emacs-lisp
  (use-package bbdb
  :init
  (setq bbdb-file "~/Dropbox/bbdb"
          bbdb-offer-save 'auto
          bbdb-notice-auto-save-file t
          bbdb-expand-mail-aliases t
          bbdb-canonicalize-redundant-nets-p t
          bbdb-always-add-addresses t
          bbdb-complete-name-allow-cycling t
  )
  (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
  :config
  (bbdb-initialize 'gnus 'message)
  (bbdb-insinuate-message))
#+END_SRC
** Composer
#+BEGIN_SRC emacs-lisp
  ;; linebreak in message editing
  (defun my-message-mode-setup ()
  (setq fill-column 72)
  (turn-on-auto-fill))

  (add-hook 'message-mode-hook 'my-message-mode-setup)
  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (use-package org-mime
    :ensure org-plus-contrib
    :defer t
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
(use-package twittering-mode
:init
(setq twittering-use-master-password t)
(setq twittering-icon-mode t)
(setq twittering-use-icon-storage t))
#+END_SRC
** Send
#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
        smtpmail-smtp-server "smtp.googlemail.com"
        smtpmail-smtp-service 587)
#+END_SRC

* Pdf-Reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode (("\\.pdf$" . pdf-view-mode))
    :bind (:map pdf-view-mode-map
                ("n" . pdf-view-scroll-up-or-next-page)
                ("N" . pdf-view-next-page-command)
                ("t" . pdf-view-scroll-down-or-previous-page)
                ("T" . pdf-view-previous-page-command))
    :config
    (pdf-tools-install)
    (evil-set-initial-state 'pdf-view-mode 'emacs))
#+END_SRC
