#+TITLE: Emacs Configuration
#+AUTHOR: Óscar Nájera

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Óscar Nájera"
      user-mail-address (if (string-equal (system-name) "klappbier")
                             "oscar.najera@tribe29.com"
                           "hi@oscarnajera.com"))
#+END_SRC
* Editor
** Basic behavior settings
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq vc-follow-symlinks t)
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default indent-tabs-mode nil)
  (setq-default fill-column 75)
  (add-hook 'text-mode-hook 'visual-line-mode) ;; word-wrap
  (add-hook 'text-mode-hook 'flyspell-mode) ;; spell-check
  (setq inhibit-startup-screen t)
#+END_SRC

Set SSH agent
#+BEGIN_SRC emacs-lisp
(setenv "SSH_AUTH_SOCK" (concat (getenv "XDG_RUNTIME_DIR")"/gnupg/S.gpg-agent.ssh"))
#+END_SRC
** Frame title includes file being used
#+BEGIN_SRC emacs-lisp
  ;;http://emacs-fu.blogspot.fr/2011/01/setting-frame-title.html
  (setq frame-title-format
    '("" invocation-name ": "(:eval (if (buffer-file-name)
                (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+END_SRC
** My lisp source or from other sources
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
** Package management
Declare the package archives to the emacs package manager.
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(setq package-archives '(("melpast" . "https://stable.melpa.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC
Make sure =use-package= is installed as it administers all packages
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

(eval-when-compile
    (require 'use-package)
    (setq use-package-verbose t
          use-package-always-defer t
          use-package-always-ensure t))
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :config
    ;; this make ediff open the comand buffer in the same frame is better when using
    ;; the tiling WM awesome
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    (defun ora-ediff-prepare-buffer ()
      "shows all contents of org file when ediffing"
      (when (memq major-mode '(org-mode emacs-lisp-mode))
      (outline-show-all)))

    (add-hook 'ediff-prepare-buffer-hook 'ora-ediff-prepare-buffer)
  )
#+END_SRC
** Style
#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :init
    (load-theme 'material t))

  ;; font size
  (set-face-attribute 'default nil :font "DejaVuSansMono Nerd Font-13")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :init
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
        powerline-default-separator 'wave)
  (require 'spaceline-config)
  (spaceline-spacemacs-theme))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %b %Y")
(display-time-mode 1)
#+END_SRC
** Hydra
Hydra allows to configure sets of keybindings.
#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC
** Evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))

  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
        "x" 'helm-M-x
        "f" 'helm-find-files
        "m" 'notmuch
        "s" 'eshell
        "q" 'kill-this-buffer
        "Q" 'kill-buffer-and-window
        "r" 'avy-goto-char
        "c" 'avy-goto-word-1
        "g" 'helm-mini)
  )

  ;;(global-set-key [escape] 'keyboard-quit)
  (global-set-key [escape] 'helm-keyboard-quit)


  (use-package key-chord
    :init
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define-global "ww" (lambda () (interactive) (save-buffer)
                                               (evil-normal-state)))
    :config
      (key-chord-mode 1))

  (use-package avy
    :ensure t )
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map "r" nil) ;; block replace
(define-key evil-motion-state-map "n" 'evil-backward-char) ;; back
(define-key evil-insert-state-map "\C-l" 'evil-delete-backward-char)
(define-key evil-insert-state-map "\C-r" 'evil-delete-backward-word)

(define-key evil-motion-state-map "r" 'evil-next-line) ;; next line
(define-key evil-motion-state-map "l" 'evil-search-next) ;; next look up
(define-key evil-motion-state-map "L" 'evil-search-previous)
(define-key evil-motion-state-map "t" 'evil-previous-line) ;; top back up
(define-key evil-normal-state-map "T" 'evil-join) ;; line together

(define-key evil-normal-state-map "s" nil) ;; remove substitute
(define-key evil-motion-state-map "s" 'evil-forward-char)  ;; moves right

(define-key evil-normal-state-map "h" 'evil-replace)
(define-key evil-visual-state-map "h" 'evil-replace) ;; because it seems to respect old motion
(define-key evil-motion-state-map "j" 'evil-find-char-to)
(define-key evil-motion-state-map "J" 'evil-find-char-to-backward)
(define-key evil-normal-state-map "k" 'redo)
(define-key evil-motion-state-map "k" nil) ;; to block old motion

;; end and begining of lines
(define-key evil-motion-state-map "-" 'evil-end-of-line)
(define-key evil-motion-state-map "0" 'evil-beginning-of-line)

;; scrolling
(define-key evil-motion-state-map (kbd "C-i") 'evil-scroll-up)
(define-key evil-normal-state-map (kbd "C-r") nil)
(define-key evil-motion-state-map (kbd "C-r") 'evil-scroll-line-down)
(define-key evil-normal-state-map (kbd "C-t") nil)
(define-key evil-motion-state-map (kbd "C-t") 'evil-scroll-line-up)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun my-save-if-bufferfilename ()
      (if (buffer-file-name)
          (progn
          (save-buffer)
          )
      (message "no file is associated to this buffer: do nothing")
      )
  )
  (add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)
#+END_SRC
** Window Management
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 150)

  (use-package ace-window
    :bind (("s-c" . ace-window))
    :config (setq aw-keys '(?a ?o ?e ?i ?r ?t ?n ?s)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require 'windmove)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(winner-mode 1)

(defun split-right-and-follow ()
  (interactive)
  (split-window-right)
  (windmove-right))

(global-set-key (kbd "C-x 3") 'split-right-and-follow)

(defun split-below-and-follow ()
  (interactive)
  (split-window-below)
  (windmove-down))

(global-set-key (kbd "C-x 2") 'split-below-and-follow)

(defhydra hydra-window ()
  "
  Movement^^        ^Split^         ^Switch^      ^Resize^
  ----------------------------------------------------------------
  _n_ ←         _d_ vertical      _g_ buffer      _N_ ←
  _r_ ↓         _q_ horizontal    _f_ind files    _R_ ↓
  _t_ ↑         _._ undo          _c_ ace 1       _T_ ↑
  _s_ →         _:_ reset         _h_ swap        _S_ →
  _F_ollow      _D_lt Other       _p_roject files _m_aximize
  _SPC_ cancel  onl_y_ this       _x_ delete      _l_aunch
  "
  ("r" windmove-down )
  ("t" windmove-up )
  ("n" windmove-left )
  ("s" windmove-right )
  ("N" hydra-move-splitter-left)
  ("R" hydra-move-splitter-down)
  ("T" hydra-move-splitter-up)
  ("S" hydra-move-splitter-right)
  ("g" helm-mini)
  ("p" helm-projectile)
  ("f" helm-find-files)
  ("F" follow-mode)
  ("c" (lambda ()
         (interactive)
         (ace-window 1)
         (add-hook 'ace-window-end-once-hook 'hydra-window/body)))
  ("d" (split-right-and-follow))
  ("q" (split-below-and-follow))
  ("h" (lambda ()
         (interactive)
         (ace-window 4)
         (add-hook 'ace-window-end-once-hook 'hydra-window/body)))
  ("x" delete-window)
  ("D" (lambda ()
         (interactive)
         (ace-window 16)
         (add-hook 'ace-window-end-once-hook 'hydra-window/body)))
  ("y" delete-other-windows)
  ("m" ace-maximize-window)
  ("." (progn (winner-undo)
              (setq this-command 'winner-undo)))
  (":" winner-redo)
  ("l" dmenu :exit t)
  ("SPC" nil))

  (global-set-key (kbd "s-p") 'hydra-window/body)
#+END_SRC
*** EXWM
#+BEGIN_SRC emacs-lisp
(defun on/exwm-config ()
  "Default configuration of EXWM."
  ;; Set the initial workspace number.
  (setq exwm-workspace-number 4)
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  ;; 's-l': Reset
  (exwm-input-set-key (kbd "s-l") #'exwm-reset)
  ;; 's-w': Switch workspace
  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
  ;; 's-N': Switch to certain workspace
  (dotimes (i 10)
    (exwm-input-set-key (kbd (format "s-%d" i))
                        `(lambda ()
                           (interactive)
                           (exwm-workspace-switch-create ,i))))
  ;; 's-p': Manage windows
  (exwm-input-set-key (kbd "s-p") 'hydra-window/body)
  ;; 's-l': Launch application
  (exwm-input-set-key (kbd "s-l")
                      (lambda (command)
                        (interactive (list (read-shell-command "$ ")))
                        (start-process-shell-command command nil command)))


  ;; Movement keys
  (exwm-input-set-key (kbd "s-n") #'windmove-left)
  (exwm-input-set-key (kbd "s-r") #'windmove-down)
  (exwm-input-set-key (kbd "s-t") #'windmove-up)
  (exwm-input-set-key (kbd "s-s") #'windmove-right)


  ;; Line-editing shortcuts
  (setq exwm-input-simulation-keys
        '(;; cut/paste
         ([?\C-w] . ?\C-x)
         ([?\M-w] . ?\C-c)
         ([?\C-y] . ?\C-v)))
  ;; Enable EXWM
  (fringe-mode 1)
  (exwm-enable))

(use-package exwm
  :if (member (getenv "DESKTOP_SESSION") '("/usr/share/xsessions/emacs" "exwm"))
  :commands exwm-enable
  :init
  ;; setup my custom keymaps
  (start-process "keymaps" nil "~/dev/helpful_scripts/keymaps.sh")
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '(0 "HDMI2"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()
              (start-process-shell-command
               "xrandr" nil "xrandr --output DP-1 --output LVDS-1 --off")))
  (exwm-randr-enable)

  (require 'exwm-systemtray)
  (exwm-systemtray-enable)

  (evil-set-initial-state 'exwm-mode 'emacs)

  (use-package pinentry
    :init (pinentry-start))

  (on/exwm-config))
#+END_SRC
**** Dashboard
#+BEGIN_SRC emacs-lisp
;;(use-package dashboard
  ;;:config
    ;;(dashboard-setup-startup-hook)
    ;;(setq dashboard-items '((agenda . 5)
                            ;;(recent . 5)
                            ;;(projects . 5))))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
;; modify dired keys
(require 'dired )
(evil-set-initial-state 'dired-mode 'emacs)
(define-key dired-mode-map "t" 'dired-previous-line)
(define-key dired-mode-map "r" 'dired-next-line)
(define-key dired-mode-map "p" 'dired-toggle-marks)
(setq-default dired-listing-switches "-alh")
#+END_SRC
** Spelling
About using hunspell and langtool from https://joelkuiper.eu/spellcheck_emacs
#+BEGIN_SRC emacs-lisp
  ; hunspell is deactivated in my arch machine because somehow version 1.7 does not work with emacs
  ;(setq ispell-program-name (executable-find "hunspell"))
  ;;(setq ispell-really-hunspell t)
  ;(setq ispell-personal-dictionary "~/dev/helpful_scripts/emacs.d/personal_dict")
  (setq ispell-skip-region-alist nil)
  ;;(setq ispell-skip-region-alist (car ispell-tex-skip-alists))
  ;;(add-to-list 'ispell-skip-region-alist )
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  ;;(add-to-list 'ispell-skip-region-alist '("^#\\+.*?:[^$]" . "$"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  ;; avoid latex enviromnents in general. May be dangerous
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXPORT latex" . "^#\\+END_EXPORT"))
  (add-to-list 'ispell-skip-region-alist '("[^\\]\\$" . "[^\\]\\$"))
  (add-to-list 'ispell-skip-region-alist '("^\\\\begin" . "^\\\\end"))
  ;; this next line approximately ignores org-ref-links
  (add-to-list 'ispell-skip-region-alist '("cite:" . "[[:space:]]"))
  (add-to-list 'ispell-skip-region-alist '("label:" . "[[:space:]]"))
  (add-to-list 'ispell-skip-region-alist '("ref:" . "[[:space:]]"))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :config
    (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"
          langtool-mother-tongue "es"
          langtool-default-language "en-US"
          langtool-disabled-rules '("WHITESPACE_RULE")))
#+END_SRC
*** Foreign languages
Documents can be set to default to certain languages that differ from my
default. This makes them save values.
#+BEGIN_SRC emacs-lisp
(setq safe-local-variable-values
      '((ispell-local-dictionary . "es_EC")
        (ispell-local-dictionary . "de_DE")
        (ispell-local-dictionary . "fr_FR")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package google-translate
  :bind (("C-c t" . 'google-translate-smooth-translate))
  :init
  (require 'google-translate-smooth-ui)
  (setq google-translate-translation-directions-alist
        '(("en" . "de") ("de" . "en")
          ("en" . "es") ("es" . "en")
          ("en" . "fr") ("fr" . "en")))
  (setq google-translate-pop-up-buffer-set-focus t))
#+END_SRC
** Add-ons
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
** Parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
  (use-package smartparens
    :diminish smartparens-mode
    :bind (:map smartparens-mode-map
          ("C-)" . sp-forward-slurp-sexp)
          ("C-(" . sp-backward-slurp-sexp)
          ("C-M-)" . sp-forward-barf-sexp)
          ("C-M-(" . sp-backward-barf-sexp))
    :init
      (require 'smartparens-config)
      (smartparens-global-mode t))
#+END_SRC
** Pass
#+BEGIN_SRC emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 20))

(use-package pass
    :bind (:map pass-mode-map
           ("r" . pass-next-entry)
           ("t" . pass-prev-entry)
           ("R" . pass-next-directory)
           ("T" . pass-prev-directory)
           ("s" . swiper)
           ("d" . pass-kill)
           ("c" . pass-copy)
           ("n" . pass-rename))
     :config
      (evil-set-initial-state 'pass-mode 'emacs))

;; auth-source-pass is integrated in Emacs 26
(use-package auth-source-pass
:after auth-source
:init
(setq auth-source-debug t
      auth-sources '(password-store))
(auth-source-pass-enable))
#+END_SRC
* Completion
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-/" 'hippie-expand)

(use-package company
  :diminish company-mode
  :bind (:map company-active-map
            ("C-r" . company-select-next)
            ("C-t" . company-select-previous)
         :map company-search-map
            ("C-r" . company-select-next)
            ("C-t" . company-select-previous))
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0.2
          company-selection-wrap-around t)
    )

(use-package yasnippet
  :config (yas-global-mode t))

(use-package yasnippet-snippets)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :commands helm-toggle-resplit-and-swap-windows
  :bind (("M-x" . helm-M-x)
         ("C-x g" . helm-mini)
         :map helm-map
         ("C-p" . helm-toggle-resplit-and-swap-windows))

  :init
  (require 'helm-config)

  (evil-leader/set-key
      "hs" 'helm-semantic-or-imenu
      "hd" 'helm-show-kill-ring
      "hl" 'helm-locate)

  (helm-mode 1))

(use-package helm-ag
  :commands helm-do-age-this-file
  :init (evil-leader/set-key "ho" 'helm-do-ag-this-file))

(use-package helm-projectile
  :commands (helm-projectile-on helm-projectile helm-projectile-ag)
  :init
  (evil-leader/set-key
     "ha" 'helm-projectile-ag
     "p" 'helm-projectile)
  :config
  (setq projectile-completion-system 'helm)
  (projectile-global-mode)
  (helm-projectile-on)
)

;; Hydra to enter in vim normal state like
;; for speed key bindings
(defhydra helm-vim-normal ()
  ("?" helm-help "help")
  ("<escape>" keyboard-escape-quit "exit")
  ("q" keyboard-escape-quit "exit")
  ("<SPC>" helm-toggle-visible-mark "mark")
  ("m" helm-toggle-all-marks "(un)mark all")
  ("l" helm-execute-persistent-action "persistent")
  ("g" helm-beginning-of-buffer "top")
  ("G" helm-end-of-buffer "bottom")
  ("c" helm-find-files-up-one-level "Dir up")
  ("f" helm-find-files-down-last-level "Dir down")
  ("r" helm-next-line "down")
  ("t" helm-previous-line "up")
  ("n" helm-previous-source "prev src")
  ("s" helm-next-source "next src")
  ("w" helm-toggle-resplit-and-swap-windows "swap windows")
  ("i" nil "cancel"))
(define-key helm-map (kbd "<escape>") 'helm-vim-normal/body)

;;(key-chord-define helm-map "jk" 'helm-like-unite/body)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (setq swiper-action-recenter t)
    (define-key swiper-map (kbd "<ESC>") 'minibuffer-keyboard-quit)
    :bind (("C-s" . swiper)
           :map evil-normal-state-map
                ("/" . swiper)
                ("?" . swiper)))

  (use-package ivy
    :bind (:map ivy-minibuffer-map
                ("C-r" . ivy-next-line)
                ("C-t" . ivy-previous-line)
                ("C-n" . ivy-reverse-i-search)))
#+END_SRC
* shell
** Xonsh
Trying to use Xonsh inside of emacs to access a pythonic terminal
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :config
  (add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))
  (setq company-global-modes '(not term-mode))
  (setq multi-term-program "/usr/bin/xonsh"))
#+END_SRC
** Eshell
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "~/dev/helpful_scripts")
  (add-to-list 'exec-path "~/.cargo/bin")
  (add-to-list 'exec-path "~/.local/bin")
  (use-package eshell-git-prompt
    :init
    (eshell-git-prompt-use-theme 'powerline))
#+END_SRC
** Tramp
Tramp is amazing to edit remote files, but you can also edit inside docker
containers where you don't even have an editor.
#+BEGIN_SRC emacs-lisp
(use-package docker-tramp)
#+END_SRC
* Org mode
** Main Behavior
#+BEGIN_SRC emacs-lisp
(use-package org
  :bind (("\C-ca" . org-agenda)
         ("\C-cc" . org-capture)
         ("\C-cl" . org-store-link))

  :init
  ;; Work directories
  (if (string-equal (system-name) "titanroam")
      (setq org-directory "~/Dropbox/org/"))

  ;; Refile
  (setq org-refile-targets `((nil :maxlevel . 3)
                             (,(expand-file-name "journal.org" org-directory) :maxlevel . 3)
                             (,(expand-file-name "todo.org" org-directory) :maxlevel . 2)))

  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  ;;imenu
  (setq org-imenu-depth 4)

  ;; Agenda files
  (setq org-agenda-files (append (mapcar (lambda (file)
                                   (expand-file-name file org-directory))
                                   '("caldav.org" "journal.org" "work_journal.org" "todo.org"))
                                 '("~/dev/metasyhabitos/oscar/log.org")))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" "DEFERRED(f@)")))
  (setq org-log-reschedule 'note)

  ;; Text editing
  ;; (setq org-hide-emphasis-markers nil) ;; default is nil
  ;;; emphasis markers can span upto 3 lines
  ;;(setf (nth 4 org-emphasis-regexp-components) 3)
  ;;(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
  ;; Org tags
  (setq org-tags-column -55)
  (setq org-adapt-indentation nil
        org-edit-src-content-indentation 0)

  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  :config
  (add-to-list 'org-structure-template-alist '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist '("p" "#+BEGIN_SRC python\n?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist '("C" "#+CAPTION: ?"))

  (mapc (lambda (state)
          (evil-define-key state org-mode-map
            (kbd "M-r") 'org-metadown
            (kbd "M-t") 'org-metaup
            (kbd "M-n") 'org-metaleft
            (kbd "M-s") 'org-metaright
            (kbd "M-R") 'org-shiftmetadown
            (kbd "M-T") 'org-shiftmetaup
            (kbd "M-N") 'org-shiftmetaleft
            (kbd "M-S") 'org-shiftmetaright
            ))
        '(normal insert))

  ;; when writting org-mode latex make this count as words to block
  ;; expansion
  (modify-syntax-entry ?_ "w" org-mode-syntax-table)
  (modify-syntax-entry ?^ "w" org-mode-syntax-table)


  ;; to interact from external sources
  (server-start)
  (setq org-modules '(org-protocol org-habit))
)

;; leader shortcuts
(evil-leader/set-key-for-mode 'org-mode
    "ot"  'outline-previous-visible-heading
    "or"  'outline-next-visible-heading
    "oo"  'org-insert-heading
    "os"  'org-sort-list
    "oci" 'org-clock-in
    "oco" 'org-clock-out
    "ocd" 'org-clock-display
    "ocr" 'org-clock-goto
    "oe" 'org-todo)


#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :ensure org
  :bind (:map org-agenda-mode-map
         ("T" . 'org-agenda-previous-line)
         ("t" . 'org-agenda-previous-item)
         ("R" . 'org-agenda-next-line)
         ("r" . 'org-agenda-next-item)
         ("n" . 'org-agenda-redo)
         ("N" . 'org-agenda-clockreport-mode)
         ("p" . 'org-agenda-todo)
         ("P" . 'org-agenda-show-tags))
  :init
  (evil-leader/set-key "oa" 'org-agenda)
  (setq org-agenda-start-on-weekday 0)
  (setq org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 4)))

  ;; Launch day agenda
  (org-agenda-list 1)
  (setq initial-buffer-choice '(lambda () (get-buffer org-agenda-buffer-name)))
)
#+END_SRC
** Alerts
This is to set the reminders of calendar events.
Using appt is quite fine. I get a remainder just above the minibuffer
There is no loud sound or anything disturbing, just the appearance of
this new window.
#+BEGIN_SRC emacs-lisp
  (setq
    appt-display-mode-line t     ;; show in the modeline
    appt-display-format 'window) ;; use our func
  (run-at-time "5 minutes" 3600 'org-agenda-to-appt)
  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...

  ;; update appt each time agenda opened
  (add-hook 'org-agenda-finalize-hook 'org-agenda-to-appt)
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
(use-package org-trello
:init
(custom-set-variables '(org-trello-files '("~/Dropbox/org/toastmasters20aniv.org")))
)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
  ;; code syntax highlighting. See section 12
  ;; http://orgmode.org/worg/org-tutorials/org-latex-export.html
  ;;(add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ("linenos" "")))
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-latex-pdf-process '("latexmk -g -pdf -shell-escape -outdir=%o %f"))
#+END_SRC
#+BEGIN_SRC emacs-lisp
    ;(plist-put org-format-latex-options :scale 1.5)
    (setq org-preview-latex-default-process 'imagemagick)
    ;(key-chord-define org-src-mode-map ".." 'org-edit-latex-preview-at-point)
    ;(key-chord-define org-mode-map ".." 'org-toggle-latex-fragment)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package org-edit-latex
    :disabled
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-edit-latex-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-math
  :config
  ;; from https://github.com/vspinu/company-math#activation
  (defun my-latex-mode-setup ()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-latex-commands)) company-backends)))
  (add-hook 'org-mode-hook 'my-latex-mode-setup)

  (add-to-list 'company-math-allow-latex-symbols-in-faces 'org-latex-and-related))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package ox-latex
  :ensure org
  :after org
  :config
  ;; APS journals
  (add-to-list 'org-latex-classes '("revtex4-1"
        "\\documentclass{revtex4-1}
        [PACKAGES]
        [EXTRA]"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes '("letter"
       "\\documentclass{letter}
       \[DEFAULT-PACKAGES]
       \[PACKAGES]
       \[EXTRA]"))

  (eval-after-load 'ox
    '(require 'ox-koma-letter)))
#+END_SRC
** Capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file ,(expand-file-name "todo.org" org-directory))
         "* TODO %?\n  %U\n%a\n%i" :clock-in t :clock-resume t)

        ("j" "Journal" entry (file+olp+datetree ,(expand-file-name
                                                  "journal.org"
                                                  org-directory))
         "* %(format-time-string \"%H:%M\") %?\n%a\n%i
- I am grateful for
- What would make today great
- Daily affirmations
- Amazing things that happened today
- How could I have made today even better?"
         :clock-in t :clock-resume t)

        ("h" "Work Journal" entry (file+olp+datetree ,(expand-file-name
                                                       "work_journal.org"
                                                       org-directory))
         "* %(format-time-string \"%H:%M\") %?\n%a\n%i"
         :clock-in t :clock-resume t)

        ("l" "Web site" entry (file+headline ,(concat
                                               org-directory
                                               "/webnotes.org")
                                             "Inbox")
         "* %a\nCaptured On: %U\nWebsite: %l\n%?\n%i\n"
            :clock-in t :clock-resume t)

        ("m" "meetup" entry (file ,(expand-file-name
                                    "caldav.org" org-directory))
         "* %?%:description \n%i")

        ("e" "Event" entry (file ,(expand-file-name
                                   "caldav.org" org-directory))
         "* %?\n%^T\n%i\n%a")
        ("p" "Ledger Cash Expense" plain (file "~/ledger/journal.ledger")
         "%(org-read-date) * %^{Payee}
    Expenses:%^{Account}%?  %^{Amount} EUR
    Expenses:Cash" :empty-lines 1)
))
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; to capture the website HTML
;;(add-to-list 'load-path "~/dev/org-protocol-capture-html/")
;;(require 'org-protocol-capture-html)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
(use-package org
  :after org
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (shell . t)
     (plantuml .t)
     (C . t)
     (scala . t)
     (dot . t)
     (python . t))))

(use-package plantuml-mode
  :config
  (setq org-plantuml-jar-path "/opt/plantuml/plantuml.jar"))
#+END_SRC

For html export try https://emacs.stackexchange.com/questions/5669/can-org-babel-replace-code-with-code-output-on-html-export
Don't need to define html on org-babel-load-languages.
#+begin_src emacs-lisp :exports none
  (defun org-babel-execute:html (body params) body)
#+end_src

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t);; sintax highligting of codeblock in org
  (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
  ;;; display/update images in the buffer after I evaluate
  ;;(setq org-image-actual-width '(500))
  ;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (setq org-babel-python-command "ipython --simple-prompt --pprint")
  (setq org-babel-default-header-args:python
        '((:session . "Python")
          (:tangle . "yes")
          (:eval . "never-export")
          (:exports . "results")))
#+END_SRC
*** RevealJS
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:load-path "~/dev/org-reveal"
:init
(setq org-reveal-root "file:///home/me/dev/reveal.js"))
#+END_SRC
** Bibliography references
#+BEGIN_SRC emacs-lisp
  (use-package bibtex
    :config
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-titlewords 5
          bibtex-autokey-titleword-length nil))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helm-bibtex
    :commands helm-bibtex
    :init
    (evil-leader/set-key "hb" 'helm-bibtex)
    :config

    (setq bibtex-completion-bibliography (map 'list (lambda (x)
                                                      (concat "~/Dropbox/biblio/" x))
                                              '("papers.bib" "zotero.bib" "arxiv.bib" "library.bib"
                                                "slides_talks.bib")))
    (setq bibtex-completion-pdf-field "file")
    (setq bibtex-completion-library-path "~/Dropbox/bibtex-pdf/")
    (setq bibtex-completion-notes-path "~/Dropbox/org/WorkPhys/literature_notes.org")

    (defun bibtex-completion-open-notes-and-pdf (keys)
         (bibtex-completion-open-pdf keys)
         (bibtex-completion-edit-notes keys))

    (helm-bibtex-helmify-action bibtex-completion-open-notes-and-pdf helm-bibtex-open-notes-and-pdf)
    ;(helm-delete-action-from-source "Edit notes with PDF" helm-source-bibtex)
    (helm-add-action-to-source "Edit notes with PDF" 'helm-bibtex-open-notes-and-pdf helm-source-bibtex 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
   :config
   (key-chord-define bibtex-mode-map "jj" 'org-ref-bibtex-hydra/body)
   (setq org-ref-show-broken-links nil)
   (setq org-ref-bibliography-notes bibtex-completion-notes-path)
   (setq org-ref-default-bibliography bibtex-completion-bibliography)
   (setq org-ref-pdf-directory bibtex-completion-library-path)
   (require 'org-ref-pdf)
   (require 'org-ref-url-utils)
   (require 'org-ref-arxiv)
   (require 'doi-utils)
   (setq doi-utils-download-pdf nil
         doi-utils-make-notes nil)
  )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun org-ref-bibtex-assoc-pdf-sup-with-entry (&optional prefix)
    "Prompt for supplementary pdf associated with entry at point and
  rename it.  Check whether a pdf already exists in
  `org-ref-pdf-directory' with the name '[bibtexkey]_sup.pdf'. If the
  file does not exist, rename it to '[bibtexkey]_sup.pdf' using
  `org-ref-bibtex-assoc-pdf-with-entry-move-function' and place it in
  `org-ref-pdf-directory'. Finally set the file field in the bibtex to
  include main pdf and supplementary pdf file locations"
    (interactive "P")
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((file (read-file-name "Select file associated with entry: "))
	     (bibtex-expand-strings t)
             (entry (bibtex-parse-entry t))
             (key (reftex-get-bib-field "=key=" entry))
             (mainpdf (concat org-ref-pdf-directory key ".pdf"))
             (suppdf (concat org-ref-pdf-directory key "_sup.pdf"))
             (key-files (concat ":" mainpdf ":PDF;:" suppdf ":PDF"))
	     (file-move-func (org-ref-bibtex-get-file-move-func prefix)))
        (if (file-exists-p suppdf)
	    (message (format "A file named %s already exists" pdf))
	  (progn
	    (funcall file-move-func file suppdf)
            (bibtex-set-field "file" key-files)
	    (message (format "Created file %s" suppdf)))))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defhydra helm-org-ref-insert-link ()
    ("c" org-ref-helm-insert-cite-link "cite article")
    ("r" org-ref-helm-insert-ref-link "reference link")
    ("l" org-ref-helm-insert-label-link "create label"))

  ;;(key-chord-define org-mode-map "jj" 'helm-org-ref-insert-link/body)
#+END_SRC
* Text Editing
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook (lambda () (abbrev-mode 1)))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
:mode "\\.md//'"
:init
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'markdown-mode-hook 'flyspell-mode))
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
:ensure auctex
:init
(setq LaTeX-command "latex -shell-escape"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit-status
  :init (evil-leader/set-key "t" 'magit-status)
  :bind (:map magit-mode-map
              ("t" . 'magit-section-backward)
              ("\M-t" . 'magit-section-backward-sibling)
              ("r" . 'magit-section-forward)
              ("\M-r" . 'magit-section-forward-sibling)
              ("p" . 'magit-tag)
              ("n" . 'magit-rebase))
  :config
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-mode-hook 'evil-insert-state)

    (setq magit-diff-refine-hunk t)
    (setq magit-repository-directories '("~/dev"))

    ;;https://emacs.stackexchange.com/questions/19672/magit-gerrit-push-to-other-branch
    (defun magit-push-to-gerrit ()
      (interactive)
      (magit-git-command-topdir "git push origin HEAD:refs/for/master"))
    (transient-append-suffix 'magit-push "g" '("g" "Push to gerrit" magit-push-to-gerrit)))

#+END_SRC
* Coding
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Linting
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
  :init
  (define-key evil-motion-state-map "gL" 'flycheck-previous-error)
  (define-key evil-motion-state-map "gl" 'flycheck-next-error)
  (add-hook 'prog-mode-hook 'flycheck-mode))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
      :init
          (add-hook 'python-mode-hook 'flyspell-prog-mode)
          (add-hook 'python-mode-hook 'elpy-mode)
      :config
          (elpy-enable)
          (pyvenv-activate "~/.virtualenvs/dev3/")
          (setq elpy-rpc-backend "jedi")
          (remove-hook 'elpy-modules 'elpy-module-flymake)
          (setq python-shell-interpreter "ipython")
          (setq python-shell-interpreter-args "-i --simple-prompt --pprint")
          (setq python-shell-completion-native-enable nil)
          (evil-define-key 'motion python-mode-map "gd" 'elpy-goto-definition)
          (setq elpy-test-runner 'elpy-test-pytest-runner)
   )

  (use-package sphinx-doc
    :diminish sphinx-doc-mode)

  (use-package cython-mode
      :mode (("\\.pyx" . cython-mode)))

  (use-package yaml-mode :ensure t)
#+END_SRC
*** IPython Notebook
#+BEGIN_SRC emacs-lisp
  (use-package ein
      :commands ein:notebooklist-open
      :init (evil-leader/set-key "ipn" 'ein:notebooklist-open)
      :config
      (require 'ein-multilang)
      (setq ein:complete-on-dot t
            ein:use-auto-complete t)
      (mapc (lambda (state)
          (evil-define-key state ein:notebook-multilang-mode-map
              (kbd "M-y") 'ein:worksheet-copy-cell
              (kbd "M-p") 'ein:worksheet-yank-cell
              (kbd "M-d") 'ein:worksheet-kill-cell
              (kbd "M-o") 'ein:worksheet-insert-cell-below
              (kbd "M-O") 'ein:worksheet-insert-cell-above

              (kbd "M-r") 'ein:worksheet-goto-next-input
              (kbd "M-t") 'ein:worksheet-goto-prev-input
              (kbd "M-R") 'ein:worksheet-move-cell-down
              (kbd "M-T") 'ein:worksheet-move-cell-up

              (kbd "M-h") 'ein:worksheet-toggle-output
              )) '(normal insert))
  )
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.html?" . web-mode)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package scss-mode)
(use-package ox-hugo
  :after ox)
#+END_SRC
** C++
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :mode (("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(let ((clang-fmt-path  "/usr/share/clang/clang-format.el"))
  (if (file-exists-p clang-fmt-path)
      (load clang-fmt-path)
    (load "/usr/share/emacs/site-lisp/clang-format-7/clang-format.el")))


(add-hook 'c-mode-common-hook (lambda ()
                                (add-hook 'before-save-hook 'clang-format-buffer nil t)))

(use-package company-c-headers
  :defer t
  :init (add-to-list 'company-backends 'company-c-headers))

(use-package gdb-mi
  :defer t
  :init (setq
         ;; use gdb-many-windows by default when `M-x gdb'
         gdb-many-windows t
         ;; Non-nil means display source file containing the main routine at startup
         gdb-show-main t))

(use-package rtags
  :pin melpast
  :config (add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
  (evil-define-key 'motion c-mode-base-map "gd" 'rtags-find-symbol-at-point)
  ;; Shutdown rdm when leaving emacs.
  (add-hook 'kill-emacs-hook 'rtags-quit-rdm))

(use-package flycheck-rtags)
(use-package dumb-jump)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Based on the Sarcasm/irony-mode compilation database code.
(defun company-mode/find-clang-complete-file ()
  (when buffer-file-name
    (let ((dir (locate-dominating-file buffer-file-name ".clang_complete")))
      (when dir
        (concat (file-name-as-directory dir) ".clang_complete")))))

;; Based on the Sarcasm/irony-mode compilation database code.
(defun company-mode/load-clang-complete-file (cc-file)
  "Load the flags from CC-FILE, one flag per line."
  (let ((invocation-dir (expand-file-name (file-name-directory cc-file)))
        (case-fold-search nil)
        compile-flags)
    (with-temp-buffer
      (insert-file-contents cc-file)
      ;; Replace relative paths with absolute paths (by @trishume)
      ;; (goto-char (point-min))
      (while (re-search-forward "\\(-I\\|-isystem\n\\)\\(\\S-+\\)" nil t)
        (replace-match (format "%s%s" (match-string 1)
                               (expand-file-name (match-string 2) invocation-dir))))
      ;; Turn lines into a list
      (setq compile-flags
            ;; remove whitespaces at the end of each line, if any
            (mapcar #'(lambda (line)
                        (if (string-match "[ \t]+$" line)
                            (replace-match "" t t line)
                          line))
                    (split-string (buffer-string) "\n" t))))
    compile-flags))

(defun c-c++/load-clang-args ()
  "Sets the arguments for company-clang, the system paths for company-c-headers
and the arguments for flyckeck-clang based on a project-specific text file."
  (unless company-clang-arguments
    (let* ((cc-file (company-mode/find-clang-complete-file))
           (flags (if cc-file (company-mode/load-clang-complete-file cc-file) '()))
           (dirs (mapcar (lambda (f) (substring f 2))
                         (remove-if-not (lambda (f) (string-prefix-p "-I" f)) flags))))
      (setq-local company-clang-arguments flags)
      (setq-local company-c-headers-path-system (append '("/usr/include" "/usr/local/include") dirs))
(setq-local flycheck-clang-args flags))))

(add-hook 'c-mode-common-hook 'c-c++/load-clang-args)
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :config
  (rust-enable-format-on-save))

(use-package cargo
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

(use-package flycheck-rust
  :ensure t
  :mode (("\\.rs\\'" . rust-mode))
  :init
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

(use-package racer
  :config
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode))

(use-package ob-rust)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :pin melpast)

(use-package clj-refactor
  :config
  (clj-refactor-mode 1))

(use-package flycheck-clojure
  :config
  (flycheck-clojure-setup))
#+END_SRC
** Emacs lisp
#+BEGIN_SRC emacs-lisp
(use-package elisp-format)
#+END_SRC
** Common lisp
#+BEGIN_SRC emacs-lisp
(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+END_SRC
** Scala
#+BEGIN_SRC emacs-lisp
(use-package ensime)

(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))
#+END_SRC
** JavaScript
#+BEGIN_SRC emacs-lisp
(use-package indium)
#+END_SRC
* Email
** Notmuch client
#+BEGIN_SRC emacs-lisp
(use-package notmuch
  :bind (:map notmuch-hello-mode-map
          ("l" . notmuch-jump-search)
          ("/" . notmuch-tree)
         :map notmuch-search-mode-map
          ("r" . notmuch-search-next-thread)
          ("N" . notmuch-search-reply-to-thread)
          ("t" . notmuch-search-previous-thread)
          ("f" . notmuch-search-filter-by-tag)
          ("/" . notmuch-tree)
          ("d" . notmuch-search-delete-thread)
          ("D" . notmuch-search-delete-all)
         :map notmuch-tree-mode-map
          ("r" . notmuch-tree-next-matching-message)
          ("t" . notmuch-tree-prev-matching-message)
          ("R" . notmuch-tree-next-message)
          ("T" . notmuch-tree-prev-message)
         :map notmuch-show-mode-map
          ("N" . notmuch-show-reply)
          ("n" . notmuch-show-reply-sender)
          ("r" . notmuch-show-next-message)
          ("t" . notmuch-show-previous-message)
          ("M-r" . notmuch-show-next-thread-show)
          ("M-t" . notmuch-show-previous-thread-show)
          ("d" . notmuch-show-delete-message)
          ("D" . notmuch-show-delete-thread-then-exit)
        )
  :config
    (setq message-directory "~/.mail/"
          message-auto-save-directory "/tmp/"
          message-signature "Oscar Najera\nSoftware Developer\n\ntribe29 GmbH — The Check_MK Company\noscar.najera@tribe29.com | Phone: +49 89 9982 097 00 | https://tribe29.com\n\nKellerstraße 29, 81667 München, Germany\nAmtsgericht München, HRB 165902\nGeschäftsführer: Jan Justus, Mathias Kettner"
          org-email-link-description-format "%c: %s")

    (define-key notmuch-tree-mode-map "n"
      (notmuch-tree-close-message-pane-and #'notmuch-show-reply-sender))
    (define-key notmuch-tree-mode-map "N"
      (notmuch-tree-close-message-pane-and #'notmuch-show-reply))
    (setq notmuch-search-oldest-first nil
          notmuch-archive-tags '("-inbox" "-unread"))
    (evil-set-initial-state 'notmuch-tree-mode 'emacs)

    (defun notmuch-show-delete-message ()
      "Delete current message if already marked as deleted undo."
      (interactive)
      (notmuch-show-tag-message
         (if (member "deleted" (notmuch-show-get-tags))
            "-deleted" "+deleted")))

    (defun notmuch-show-delete-thread-then-exit ()
      "Delete all messages in the current buffer, then exit back to search results."
      (interactive)
      (notmuch-show-tag-all '("+deleted"))
      (notmuch-show-next-thread))

    (defun notmuch-search-delete-thread()
      "Delete all messages in the current thread or undelete"
       (interactive)
       (notmuch-search-tag
          (if (member "deleted" (notmuch-search-get-tags))
               '("-deleted")
               '("+deleted" "-inbox" "-unread"))))

     (defun notmuch-search-delete-all()
       "Delete all messages in the current buffer"
        (interactive)
        (notmuch-search-tag-all
           '("+deleted" "-inbox" "-unread")))


    (define-key notmuch-tree-mode-map "d"
       (lambda ()
       "delete message"
          (interactive)
          (notmuch-tree-tag
             (if (member "deleted" (notmuch-tree-get-tags))
                  '("-deleted")
                  '("+deleted" "-inbox" "-unread")))))

    (setq notmuch-saved-searches
        '((:name "inbox" :query "tag:inbox" :key "i" :sort-order newest-first)
          (:name "CMK" :query "(tag:CMK-JIRA or tag:lists/gerrit-check_mk) and tag:unread" :key "c")
          (:name "flagged" :query "tag:flagged" :key "f")
          (:name "unread" :query "tag:unread" :key "u")
          (:name "drafts" :query "tag:draft" :key "d")))

    (setq notmuch-show-all-tags-list t
          notmuch-hello-tag-list-make-query "tag:unread and not tag:killed")

    (setq notmuch-fcc-dirs '((".*@oscarnajera.com" . "hi_pers/Sent")
                             ("oscar.najera@tribe29.com" . "work/Sent")
                             ;;(".*@gmail.com" . "\"gmail/[Gmail]/.Sent Mail\"")
                             (".*@u-psud.fr" . "upsud/Sent")))

    (setq notmuch-crypto-process-mime t)
    (setq message-kill-buffer-on-exit t)


    (setq notmuch-search-line-faces
          `(("deleted" . (:strike-through "red"))
            ("flagged" 'notmuch-search-flagged-face)
            ("unread" . (:foreground "#81d4fa"
                         :weight bold))))

    ;;Load org-notmuch independently to open links from org files
    (require 'org-notmuch)
)
#+END_SRC

** BBDB
#+BEGIN_SRC emacs-lisp
(use-package bbdb
  :disabled
  :init
  (setq bbdb-file "~/Dropbox/ bbdb"
        bbdb-offer-save 'auto
        bbdb-notice-auto-save-file t

        bbdb-expand-mail-aliases t
        bbdb-canonicalize-redundant-nets-p t

        bbdb-always-add-addresses t
        bbdb-complete-name-allow-cycling t)

  :config (bbdb-insinuate-message))
#+END_SRC
** Composer
#+BEGIN_SRC emacs-lisp
  ;; linebreak in message editing
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (add-hook 'message-mode-hook 'flyspell-mode)
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-orgtbl)
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
  (use-package org-mime
    :commands (org-mime-htmlize org-mime-org-buffer-htmlize))
#+END_SRC
** twitter
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t)
    :config
    (add-hook 'twittering-edit-mode-hook (lambda () (ispell-minor-mode) (flyspell-mode)))

    :bind (:map twittering-mode-map
           ("r" . twittering-goto-next-status)
           ("t" . twittering-goto-previous-status)))
#+END_SRC
** Send
#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'message-smtpmail-send-it
  )

  (defconst smtp-from-server-alist
    '(
      ("Oscar Najera <hi@oscarnajera.com>" . ("mail.najera.pw" 587 starttls))
      ("Oscar Najera <hello@oscarnajera.com>" . ("mail.najera.pw" 587 starttls "hi"))
      ("Oscar Najera <oscar.najera@tribe29.com>" . ("mx.tribe29.com" 587 starttls "on"))
      ("Oscar Najera <najera.oscar@gmail.com>" . ("smtp.googlemail.com" 587 starttls "najera.oscar"))
      ("Oscar Najera <oscar.najera-ocampo@u-psud.fr>" . ("smtps.u-psud.fr" 465 ssl "oscar.najera-ocampo"))
      ))

  (defun set-smtp-server ()
    (let* ((smtp-conf (cdr (assoc (save-restriction
                                (message-narrow-to-headers)
                                (message-fetch-field "from"))
                                  smtp-from-server-alist)))
           (server (nth 0 smtp-conf))
           (port (nth 1 smtp-conf))
           (protocol (nth 2 smtp-conf))
           (user (nth 3 smtp-conf)))
      (unless server (setq server "mail.najera.pw"
                           port 587
                           protocol starttls
                           user "hi"))
      (setq smtpmail-smtp-server server
            smtpmail-smtp-service port
            smtpmail-stream-type protocol
            smtpmail-smtp-user user)
      (message "SMTP server changed to %s in port %s by %s" server port protocol)))
  (add-hook 'message-send-mail-hook 'set-smtp-server)
#+END_SRC
* RSS
#+BEGIN_SRC emacs-lisp
;; functions to support syncing .elfeed
;; makes sure elfeed reads index from disk before launching
;; http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/

(defun bjm/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

;;write to disk when quiting
(defun bjm/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(use-package elfeed
  :bind (:map elfeed-search-mode-map
              ("r" . next-line)
              ("t" . previous-line)
              ("n" . elfeed-search-untag-all-unread)
              ("q" . bjm/elfeed-save-db-and-bury)
         :map elfeed-show-mode-map
              ("r" . elfeed-show-next)
              ("t" . elfeed-show-prev))
  :config
  (evil-set-initial-state 'elfeed-show-mode 'emacs)
  (evil-set-initial-state 'elfeed-search-mode 'emacs))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC
* Pdf-Reading
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :mode (("\\.pdf$" . pdf-view-mode))
    :bind (:map pdf-view-mode-map
                ("r" . pdf-view-scroll-up-or-next-page)
                ("R" . pdf-view-next-page-command)
                ("t" . pdf-view-scroll-down-or-previous-page)
                ("T" . pdf-view-previous-page-command)
                ("C-s" . isearch-forward)
                ("a" . pdf-annot-list-annotations)
    )
    :config
    (pdf-tools-install)
    (evil-define-key 'normal pdf-annot-list-mode-map
     "f" 'pdf-annot-list-display-annotation-from-id
     "d" 'tablist-flag-forward
     "x" 'tablist-do-flagged-delete
     "u" 'tablist-unmark-forward
     "q" 'tablist-quit)
    (evil-set-initial-state 'pdf-view-mode 'emacs))

  (use-package org-pdfview
    :commands org-pdfview-open
    :after org
    :init
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open file))))
    (add-to-list 'org-file-apps '("\\.pdf::\\([[:digit:]]+\\)\\'" . (lambda (file link) (org-pdfview-open file))))
    )
#+END_SRC
* Music
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :init
    (setq emms-source-file-default-directory "~/Music/")
    (setq emms-player-mpd-music-directory "~/Music")
    :commands (emms-browser emms-smart-browse)
    :config
    (emms-all)
    (emms-default-players)
    (add-to-list 'emms-info-functions 'emms-info-mpd)
    (add-to-list 'emms-player-list 'emms-player-mpd)
    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
    (add-to-list 'emms-info-functions 'emms-info-mp3info)


    (evil-set-initial-state 'emms-playlist-mode 'emacs)
    (evil-define-key 'normal emms-browser-mode-map
      (kbd "<return>") 'emms-browser-add-tracks
      (kbd "<tab>") 'emms-browser-toggle-subitems
      "/" 'emms-isearch-buffer ; This shows hidden items during search.

      "ga" 'emms-browse-by-artist
      "gA" 'emms-browse-by-album
      "gb" 'emms-browse-by-genre
      "gy" 'emms-browse-by-year
      "gc" 'emms-browse-by-composer
      "gp" 'emms-browse-by-performer

      "+" 'emms-volume-raise
      "-" 'emms-volume-lower
     )

    (require 'emms-info-libtag)
    (setq emms-info-functions '(emms-info-libtag))
   )
#+END_SRC
** TODO save & anotations
http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
* Test
#+BEGIN_SRC emacs-lisp
  (use-package mediawiki

    :config
    (setq mediawiki-site-alist
          '(("Wikipedia" "https://en.wikipedia.org/w/" "Titan-cerberus" "" nil "User:Titan-cerberus")
            ("clusterorlando" "https://www.stem.lps.u-psud.fr/cluster/" "oscar" "" nil "Accueil")
            ("SHAWIKI" "https://wiki.sha2017.org/" "oscar" "" nil "Accueil")
            ("ArchWiki" "https://wiki.archlinux.org/" "" "" nil "Main page"))))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(use-package ox-rst)
(use-package mastodon
:config
(setq mastodon-instance-url "https://cybre.space"))
#+END_SRC

#+RESULTS:
* TODO packages to check
read win-point. It keeps track where the window was. So looking the same
file on separate windows is traceable

Save-place

org-dynamic blocks
column view
* android
#+BEGIN_SRC emacs-lisp
(use-package android-mode
  :init (setq android-mode-sdk-dir "~/Android/Sdk"))
#+END_SRC

* Ledger
Emacs mode for managing ledger text files
#+BEGIN_SRC emacs-lisp
(use-package
  ledger-mode
  :config

  (add-hook 'ledger-mode-hook (lambda ()
                                (add-hook 'before-save-hook 'ledger-mode-clean-buffer nil t)))
)
#+END_SRC
* Circe
#+BEGIN_SRC emacs-lisp
(use-package circe
    :config
    (setq circe-default-user "Titan-C"
          )
    (setq circe-network-options
      '(("Freenode"
         :tls t
         :nick "Titan-C"
         :channels ("#emacs-circe" "#clojure")))))
#+END_SRC
* Check_MK
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f10>")
                (lambda ()
                  (interactive)
                  (async-shell-command "~/git/zeug_cmk/bin/f12" "*f12*")))
#+END_SRC
** Jira Issue management
#+BEGIN_SRC emacs-lisp
(use-package
  org-jira
  :config
  (setq jiralib-url "https://jira.lan.tribe29.com"))
#+END_SRC
